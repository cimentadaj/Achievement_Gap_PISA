perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(80, 20))
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
df_try <-
df %>%
filter(country == "Germany") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(50, 10))
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 50))
df_try <-
df %>%
filter(country == "Netherlands") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 50))
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
df <- pisa_all2$value[[2]]
df_try <-
df %>%
filter(country == "Netherlands") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
df %>%
filter(country == "Germany") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df %>%
filter(country == "Germany") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
pisa_all2
map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "Germany") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
})
map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "United States") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
})
map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "Netherlands") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
})
enframer
d <- map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "Netherlands") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
}) %>%
setNames(seq(2000, 2015, 3)) %>%
enframe() %>%
unnest()
d
seq(1, 12, 2)
d <- map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "Netherlands") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
}) %>%
setNames(seq(2000, 2015, 3)) %>%
enframe() %>%
unnest() %>%
slice(seq(1, 12, 2))
d
d <- map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "Germany") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
}) %>%
setNames(seq(2000, 2015, 3)) %>%
enframe() %>%
unnest() %>%
slice(seq(1, 12, 2))
d
d %>%
ggplot(aes(name, value)) +
geom_line()
d %>%
ggplot(aes(name, value)) +
geom_point()
d %>%
ggplot(aes(name, value)) +
geom_point() +
geom_line(aes(group = 1))
d <- map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "Spain") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
}) %>%
setNames(seq(2000, 2015, 3)) %>%
enframe() %>%
unnest() %>%
slice(seq(1, 12, 2))
d %>%
ggplot(aes(name, value)) +
geom_point() +
geom_line(aes(group = 1))
d <- map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "United States") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
}) %>%
setNames(seq(2000, 2015, 3)) %>%
enframe() %>%
unnest() %>%
slice(seq(1, 12, 2))
d %>%
ggplot(aes(name, value)) +
geom_point() +
geom_line(aes(group = 1))
d <- map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "Denmark") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
}) %>%
setNames(seq(2000, 2015, 3)) %>%
enframe() %>%
unnest() %>%
slice(seq(1, 12, 2))
d %>%
ggplot(aes(name, value)) +
geom_point() +
geom_line(aes(group = 1))
d <- map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "Finland") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_calculator(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
}) %>%
setNames(seq(2000, 2015, 3)) %>%
enframe() %>%
unnest() %>%
slice(seq(1, 12, 2))
d %>%
ggplot(aes(name, value)) +
geom_point() +
geom_line(aes(group = 1))
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad), `6` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(high_edu_broad))
}
.x
})
.x <- adapted_year_data[[1]]
cimentadaj::describe(.x)
reliability_pisa
.x <- adapted_year_data[[1]]
reliability <- reliability_pisa[1]
test <- "MATH"
probs <- c(0.9, 0.1)
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
conf
weights_var <- conf$variables$weightFinal
.x <-
.x %>%
dplyr::select(wave,
matches(paste0("^PV.*", test, "$")),
country,
one_of(weights_var),
AGE)
.x
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
.x$dv <- rowMedians(as.matrix(.x[test_vars]), na.rm = T)
.x
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
mod2 <-
lmer(adj_pvnum ~ escs_dummy + (1 + escs_dummy | country),
data = .x,
weights = .x[[weights_var]])
.y <- reliability_pisa[1]
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
mod2 <-
lmer(adj_pvnum ~ escs_dummy + (1 + escs_dummy | country),
data = .x,
weights = .x[[weights_var]])
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
.x
.x
mod2 <- split(.x, .x$country)
cimentadaj::describe(mod2)
.x <- adapted_year_data[[1]]
.y <- reliability_pisa[1]
test <- "MATH"
probs <- c(0.9, 0.1)
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
.x <-
.x %>%
dplyr::select(wave,
matches(paste0("^PV.*", test, "$")),
high_edu_broad,
country,
one_of(weights_var),
AGE)
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
.x$dv <- rowMedians(as.matrix(.x[test_vars]), na.rm = T)
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
.x
.x <- adapted_year_data[[1]]
.y <- reliability_pisa[1]
test <- "MATH"
probs <- c(0.9, 0.1)
.x <-
.x %>%
dplyr::select(wave,
matches(paste0("^PV.*", test, "$")),
high_edu_broad,
country,
one_of(weights_var),
AGE) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
.x
.x$high_edu_broad
.x
mod2 <-
split(.x, .x$country) %>%
map(function(each_country) perc_calculator(each_country, high_edu_broad, dv, weights = W_FSTUWT))
.x
.x <- adapted_year_data[[1]]
.y <- reliability_pisa[1]
test <- "MATH"
probs <- c(0.9, 0.1)
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
.x <-
.x %>%
dplyr::select(wave,
matches(paste0("^PV.*", test, "$")),
high_edu_broad,
country,
one_of(weights_var),
AGE) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
# Calculate median math score of all PV's
.x$dv <- rowMedians(as.matrix(.x[test_vars]), na.rm = T)
# Should I estimate the model separately by country?
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
# Take residuals of model and divide by rmse. Multiply that by
# 1 / sqrt(reliability of each survey), which is .y in the loop.
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
.x
mod2 <-
split(.x, .x$country) %>%
map(function(each_country) perc_calculator(each_country, high_edu_broad, adj_pvnum, weights = W_FSTUWT))
split(.x, .x$country) %>%
map(function(each_country) perc_calculator(each_country, high_edu_broad, adj_pvnum))
.x %>%
filter(country == "Germany")
.x %>%
filter(country == "Germany") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x %>%
filter(country == "United States") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x %>%
filter(country == "Denmark") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x %>%
filter(country == "Finland") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x %>%
filter(country == "France") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x <- adapted_year_data[[3]]
.y <- reliability_pisa[3]
test <- "MATH"
probs <- c(0.9, 0.1)
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
.x <-
.x %>%
dplyr::select(wave,
matches(paste0("^PV.*", test, "$")),
high_edu_broad,
country,
one_of(weights_var),
AGE) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
# Calculate median math score of all PV's
.x$dv <- rowMedians(as.matrix(.x[test_vars]), na.rm = T)
# Should I estimate the model separately by country?
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
# Take residuals of model and divide by rmse. Multiply that by
# 1 / sqrt(reliability of each survey), which is .y in the loop.
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
.x %>%
filter(country == "France") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x %>%
filter(country == "Germany") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x %>%
filter(country == "United States") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x %>%
filter(country == "United States") %>%
perc_calculator(high_edu_broad, adj_pvnum)
.x %>%
filter(country == "Italy") %>%
perc_calculator(high_edu_broad, adj_pvnum)
