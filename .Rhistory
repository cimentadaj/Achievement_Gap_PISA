rownames_to_column() %>%
gather(escs_dummy, Mean, -rowname) %>%
mutate(escs_dummy = dplyr::recode(escs_dummy,
`(Intercept)` = "0",
`escs_dummy` = "1"))
# Take the absolute country standard errors
se <-
se.coef(mod2)$country %>%
as.data.frame() %>%
rownames_to_column() %>%
gather(escs_dummy, s.e., -rowname) %>%
mutate(escs_dummy = dplyr::recode(escs_dummy,
`(Intercept)` = "0",
`escs_dummy` = "1"))
results <-
inner_join(country_coef, se, by = c("rowname", "escs_dummy")) %>%
rename(country = rowname) %>%
arrange(country, escs_dummy)
message(paste0(unique(.x$wave), " modeling done"))
results
})
}
# Adapted from: https://github.com/jtleek/slipper/blob/master/R/slipper.R
# Returns a tibble with the actual expr + the bootstrapped expr.
bootstrapper <- function(df, expr, B = 100, n = nrow(df), replacement = TRUE) {
bootstrapper_(df, lazyeval::lazy(expr), B, n, replacement)
}
bootstrapper_ <- function(df, expr, B = 500, n = nrow(df), replacement = TRUE) {
obs_val = lazyeval::lazy_eval(expr, data = df)
boot_val = replicate(B, {
newdata = sample_n(df, n, replace = replacement)
lazyeval::lazy_eval(expr, data = newdata)
})
out = tibble(type = c("observed", "bootstrap"),
value = c(obs_val, mean(boot_val, na.rm = T)))
return(out)
}
# For example
# bootstrapper(mtcars, mean(mpg), B = 200)
@
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad), `6` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(high_edu_broad))
}
.x
})
pisa_all <- read_rds("./data/pisa_listcol.Rdata")
pisa_all <- read_rds("./paper/data/pisa_listcol.Rdata")
pisa_all2 <- pisa_all
years <- seq(2000, 2015, 3)
db <- paste0("pisa", years)
pisa_all2$value <- map2(pisa_all2$value, db, ~ { .x$wave <- .y; .x})
pisa_all2$value[[1]]$CNT <- pisa_all2$value[[1]]$COUNTRY
pisa_all2$value <- map(pisa_all2$value, ~ {
# 2000 to 2015
# The coding is from 0 to 6, where 0 is no schooling and 6 is
# BA or above.
# When turning 0:6 to numeric, it becomes 1:7 that's why
# I recode 8:9 to NA. This, however, didn't work for last two surveys
.x$father_edu <- car::recode(as.numeric(.x$FISCED), "8:9 = NA")
.x$mother_edu <- car::recode(as.numeric(.x$MISCED), "8:9 = NA")
.x$high_edu_broad <- pmax(.x$father_edu, .x$mother_edu)
.x$country <- pisa_countrynames[as.character(.x$CNT)]
if (any(unique(.x$wave) %in% c("pisa2012", "pisa2015"))) {
# These two surveys were from 0:6 so I had to add + 1
# so that it equals 1:7 as all other surveys.
.x$father_edu <- .x$father_edu + 1
.x$mother_edu <- .x$mother_edu + 1
.x$high_edu_broad <- .x$high_edu_broad + 1
}
.x
})
reliability_pisa <-
c("2000" = 0.81,
"2003" = 0.85,
"2006" = 0.78,
"2009" = 0.74,
"2012" = 0.82,
"2015" = 0.74) # 2015 imputed
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad), `6` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(high_edu_broad))
}
.x
})
results_math <- read_rds("./paper/data/delete.Rdata")
results_read <- read_rds("./paper/data/delete_read.Rdata")
results_math_topmid <- read_rds("./paper/data/delete_math_topmid.Rdata")
results_read_topmid <- read_rds("./paper/data/delete_read_topmid.Rdata")
results_math_midbottom <- read_rds("./paper/data/delete_math_midbottom.Rdata")
results_read_midbottom <- read_rds("./paper/data/delete_read_midbottom.Rdata")
escs_dummy_creator <- function(df, probs) {
map(df, function(.x) {
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
country_split <- split(.x, .x$country)
country_list <- map(country_split, function(country) {
print(unique(country$country))
quan <- quantile_missing(country, weights_var, probs)
# It's very important to create a variable that returns the number of observations of this dummy
# For each country. Possibly to weight by the number of observations.
country$escs_dummy <-
with(country, case_when(escs_trend >= quan[2] ~ 1,
escs_trend <= quan[1] ~ 0))
country
})
.x <-
enframe(country_list) %>%
unnest(value)
message(paste(unique(.x$wave), "data ready"))
.x
})
}
escs_data <- escs_dummy_creator(adapted_year_data, c(0.1, 0.9))
exclude <- -6
pisa_all2$value[exclude] <-
pmap(list(pisa_all2$value[exclude], escs_trend, years[exclude]), function(.x, .y, .z) {
# The escs data needs to have the key variables the same class as the
# same data.
escs <-
.y %>% mutate(schoolid = as.numeric(schoolid),
stidstd = as.numeric(stidstd))
# .z is the corresponding year that will be created as a column
# And perform the same transformation of the key variables as in the ESCS data
data_trend <-
.x %>%
mutate(
year = .z,
schoolid = as.numeric(as.character(SCHOOLID)),
stidstd = as.numeric(as.character(STIDSTD))
) %>%
left_join(escs,
by = c("country", "schoolid", "stidstd"))
message(paste(unique(.x$wave), "done"))
data_trend
})
pisa_all2$value[[6]] <-
pisa_all2$value[[6]] %>%
rename(escs_trend = ESCS)
escs_dummy_creator <- function(df, probs) {
map(df, function(.x) {
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
country_split <- split(.x, .x$country)
country_list <- map(country_split, function(country) {
print(unique(country$country))
quan <- quantile_missing(country, weights_var, probs)
# It's very important to create a variable that returns the number of observations of this dummy
# For each country. Possibly to weight by the number of observations.
country$escs_dummy <-
with(country, case_when(escs_trend >= quan[2] ~ 1,
escs_trend <= quan[1] ~ 0))
country
})
.x <-
enframe(country_list) %>%
unnest(value)
message(paste(unique(.x$wave), "data ready"))
.x
})
}
escs_data <- escs_dummy_creator(adapted_year_data, c(0.1, 0.9))
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad), `6` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(high_edu_broad))
}
.x
})
escs_data <- escs_dummy_creator(adapted_year_data, c(0.1, 0.9))
map_lgl(escs_data, ~ "HISEI" %in% names(.x))
escs_data[[1]]$high_edu_broad <- dplyr::recode(escs_data[[1]]$high_edu_broad, `6` = 7)
edu_calc <- function(df) {
df %>%
select(country, escs_dummy, high_edu_broad) %>%
count(country, escs_dummy, high_edu_broad) %>%
group_by(country, escs_dummy) %>%
mutate(total_n = sum(n),
perc = n / total_n * 100) %>%
filter(country %in% countries, high_edu_broad %in% c(1, 7)) %>%
select(country, escs_dummy, high_edu_broad, perc) %>%
map_if(is_double, round, 2) %>%
as_tibble() %>%
filter(!is.na(escs_dummy)) %>%
spread(high_edu_broad, perc)
}
summary_data <-
map(escs_data, edu_calc) %>%
setNames(years) %>%
enframer()
df <- escs_data
describe(df)
df <- escs_data[[1]]
df
df %>%
select(country, escs_dummy, high_edu_broad)
df %>%
select(country, escs_dummy, high_edu_broad)
df %>% select(country)
df %>%
dplyr::select(country, escs_dummy, high_edu_broad)
df %>%
dplyr::select(country, escs_dummy, high_edu_broad) %>%
count(country, escs_dummy, high_edu_broad)
df %>%
dplyr::select(country, escs_dummy, high_edu_broad)
count
df %>%
dplyr::select(country, escs_dummy, high_edu_broad) %>%
dplyr::count(country, escs_dummy, high_edu_broad)
edu_calc <- function(df) {
df %>%
dplyr::select(country, escs_dummy, high_edu_broad) %>%
dplyr::count(country, escs_dummy, high_edu_broad) %>%
group_by(country, escs_dummy) %>%
mutate(total_n = sum(n),
perc = n / total_n * 100) %>%
filter(country %in% countries, high_edu_broad %in% c(1, 7)) %>%
select(country, escs_dummy, high_edu_broad, perc) %>%
map_if(is_double, round, 2) %>%
as_tibble() %>%
filter(!is.na(escs_dummy)) %>%
spread(high_edu_broad, perc)
}
summary_data <-
map(escs_data, edu_calc) %>%
setNames(years) %>%
enframer()
edu_calc <- function(df) {
df %>%
dplyr::select(country, escs_dummy, high_edu_broad) %>%
dplyr::count(country, escs_dummy, high_edu_broad) %>%
group_by(country, escs_dummy) %>%
mutate(total_n = sum(n),
perc = n / total_n * 100) %>%
filter(country %in% countries, high_edu_broad %in% c(1, 7)) %>%
dplyr::select(country, escs_dummy, high_edu_broad, perc) %>%
map_if(is_double, round, 2) %>%
as_tibble() %>%
filter(!is.na(escs_dummy)) %>%
spread(high_edu_broad, perc)
}
summary_data <-
map(escs_data, edu_calc) %>%
setNames(years) %>%
enframer()
enframer <- function(df, col_name = "name") {
df %>%
enframe(name = col_name) %>%
unnest()
}
summary_data <-
map(escs_data, edu_calc) %>%
setNames(years) %>%
enframer()
avg_performance <-
list(results_math[[1]], results_math[[6]]) %>%
set_names(c(2000, 2015)) %>%
enframe() %>%
unnest()
summary_table <-
sample_tables_topbottom %>%
mutate(escs_dummy = as.character(escs_dummy)) %>%
filter(name %in% c("2000", "2015")) %>%
left_join(avg_performance) %>%
arrange(country, name)
sample_size_calc <- function(df, probs, selected = F, cnts = NULL) {
stopifnot(selected & !is.null(cnts))
if (selected) df <- map(df, ~ filter(.x, country %in% cnts))
cnt_to_bind <-
map(df, function(df) {
print(unique(df$wave))
conf <- if (unique(df$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
split_df <- split(df, df$country)
split_df_two <-
map(split_df, ~ {
# In some countries the quan can't be estimated because of very few obs.
# The function doesn't stop but returns two NA's.
quan <- quantile_missing(.x, weights_var, probs)
# It's very important to create a variable that returns the number of observations of this dummy
# For each country. Possibly to weight by the number of observations.
.x$escs_dummy <-
with(.x, case_when(escs_trend >= quan[2] ~ 1,
escs_trend <= quan[1] ~ 0))
.x
})
unsplit_df <- split_df_two %>% enframe() %>% unnest(value)
unsplit_df %>%
dplyr::count(country, escs_dummy) %>%
filter(!is.na(escs_dummy)) %>%
left_join(summarize(group_by(unsplit_df, country), total_n = n()), by = "country") %>%
mutate(perc = paste0(round(n / total_n * 100, 0), "%")) %>%
dplyr::select(-total_n)
})
setNames(cnt_to_bind, seq(2000, 2015, 3)) %>%
enframe() %>%
unnest()
}
sample_tables_topbottom <- sample_size_calc(adapted_year_data, c(.1, .9), selected = TRUE, countries)
avg_performance <-
list(results_math[[1]], results_math[[6]]) %>%
set_names(c(2000, 2015)) %>%
enframe() %>%
unnest()
summary_table <-
sample_tables_topbottom %>%
mutate(escs_dummy = as.character(escs_dummy)) %>%
filter(name %in% c("2000", "2015")) %>%
left_join(avg_performance) %>%
arrange(country, name)
table_coming <-
summary_table %>%
select(-perc) %>%
gather(cats, vals, -(name:escs_dummy)) %>%
unite(all_vals, escs_dummy, cats, sep = "_") %>%
spread(all_vals, vals) %>%
select(name, country, `0_n`, `0_Mean`, `0_s.e.`, `1_n`, `1_Mean`, `1_s.e.`) %>%
mutate(`0_n` = as.character(`0_n`),
`1_n` = as.character(`1_n`)) %>%
xtable::xtable()
table_coming <-
summary_table %>%
select(-perc) %>%
gather(cats, vals, -(name:escs_dummy)) %>%
unite(all_vals, escs_dummy, cats, sep = "_") %>%
spread(all_vals, vals) %>%
dplyr::select(name, country, `0_n`, `0_Mean`, `0_s.e.`, `1_n`, `1_Mean`, `1_s.e.`) %>%
mutate(`0_n` = as.character(`0_n`),
`1_n` = as.character(`1_n`)) %>%
xtable::xtable()
table_coming <-
summary_table %>%
dplyr::select(-perc) %>%
gather(cats, vals, -(name:escs_dummy)) %>%
unite(all_vals, escs_dummy, cats, sep = "_") %>%
spread(all_vals, vals) %>%
dplyr::select(name, country, `0_n`, `0_Mean`, `0_s.e.`, `1_n`, `1_Mean`, `1_s.e.`) %>%
mutate(`0_n` = as.character(`0_n`),
`1_n` = as.character(`1_n`)) %>%
xtable::xtable()
addtorow <- list()
addtorow$pos <- list(0)
addtorow$command <- paste("\\hline \\
& & & Low SES & & & High SES \\\\
\\cmidrule(l){3-5}
\\cmidrule(l){6-8}",
paste0(
c("Year",
"Countries",
"N",
"Avg score",
"S.E",
"N",
"Avg score",
"S.E"),
collapse = " & "),
"\\\\ \\hline")
print(table_coming,
scalebox = '0.75',
floating = FALSE,
add.to.row = addtorow,
include.colnames = FALSE,
include.rownames = FALSE,
hline.after = nrow(table_coming),
caption.placement = "top",
caption = "SES sample size and ISCED composition")
table_coming <-
summary_table %>%
dplyr::select(-perc) %>%
gather(cats, vals, -(name:escs_dummy)) %>%
unite(all_vals, escs_dummy, cats, sep = "_") %>%
spread(all_vals, vals) %>%
dplyr::select(name, country, `0_n`, `0_Mean`, `0_s.e.`, `1_n`, `1_Mean`, `1_s.e.`) %>%
mutate(`0_n` = as.character(`0_n`),
`1_n` = as.character(`1_n`))
table_coming
xtable::xtable(table_coming) %>%
print(
add.to.row = addtorow,
caption = "SES sample size and ISCED composition"
)
xtable::xtable(table_coming)
addtorow
xtable::xtable(table_coming) %>%
print(
add.to.row = addtorow,
caption = "SES sample size and ISCED composition"
)
xtable::xtable(table_coming) %>%
print(
caption = "SES sample size and ISCED composition",
add.to.row = addtorow
)
?print.xtable
xtable::xtable(table_coming,
caption = "SES sample size and ISCED composition") %>%
print(
add.to.row = addtorow
)
xtable::xtable(table_coming,
caption = "SES sample size and ISCED composition") %>%
print(
add.to.row = addtorow,
include.colnames = FALSE,
include.rownames = FALSE,
hline.after = nrow(table_coming)
)
xtable::xtable(table_coming,
caption = "SES sample size and ISCED composition") %>%
print(
add.to.row = addtorow,
include.colnames = FALSE,
include.rownames = FALSE
)
nrow(table_coming)
xtable::xtable(table_coming,
caption = "SES sample size and ISCED composition") %>%
print(
table.placement = "ht",
add.to.row = addtorow,
include.colnames = FALSE,
include.rownames = FALSE,
hline.after = nrow(table_coming)
)
xtable(table_coming,
caption = "SES sample size and ISCED composition"
) %>%
print(
add.to.row = addtorow,
include.colnames = FALSE,
include.rownames = FALSE,
hline.after = nrow(table_coming)
)
xtable(table_coming,
caption = "SES sample size and ISCED composition"
) %>%
print(
floating = FALSE,
add.to.row = addtorow,
include.colnames = FALSE,
include.rownames = FALSE,
hline.after = nrow(table_coming)
)
xtable(table_coming,
caption = "SES sample size and ISCED composition"
) %>%
print(
floating = FALSE,
add.to.row = addtorow,
include.colnames = FALSE,
include.rownames = FALSE,
hline.after = nrow(table_coming)
)
xtable(table_coming,
caption = "SES sample size and ISCED composition"
) %>%
print(
add.to.row = addtorow,
include.colnames = FALSE,
include.rownames = FALSE,
hline.after = nrow(table_coming)
)
ready_data <- dif_data(complete_gaps, tracking_data)
complete_data_topbottom %>%
filter(country %in% countries) %>%
mutate(country = factor(country, levels = ordered_cnt, ordered = TRUE)) %>%
select(wave, country, matches("*._math$")) %>%
gather(ses, gap_size, matches("^\\d_mean_math$")) %>%
separate(ses, c("ses", "delete"), sep = 2) %>%
mutate(ses = gsub("_", "", ses)) %>%
filter(complete.cases(.)) %>%
# gather(lower_bound, lower, matches("\\d_lower")) %>%
# gather(upper_bound, upper, matches("\\d_upper"))
ggplot(aes(as.factor(wave), gap_size, group = ses, colour = ses, shape = ses)) +
geom_point(size = 2, alpha = 0.4) +
geom_line(alpha = 0.4) +
geom_line(stat = "smooth", method = "lm", aes(group = 1),
formula = y ~ splines::ns(x, 1), linetype = "longdash",
colour = "black") +
scale_y_continuous(name = "Standardized test scores (mean 0)") +
scale_x_discrete(name = NULL, breaks = c(2000, 2009, 2015)) +
scale_colour_discrete(name = NULL, labels = c("Low SES", "High SES")) +
scale_shape_discrete(name = NULL, labels = c("Low SES", "High SES")) +
ggtitle("Evolution of the achievement gap by top/bottom groups") +
# geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1, alpha = 0.4) +
# geom_hline(yintercept = 0, linetype = "longdash") +
# coord_cartesian(ylim = c(0, 3)) +
facet_wrap(~ country, ncol = 5) +
theme_few() +
theme(panel.spacing = unit(1, "lines"),
legend.position = "bottom")
