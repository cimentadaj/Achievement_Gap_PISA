) +
scale_linetype_discrete(
name = "Vocational index \n quantiles",
labels = seq(100, 0, -25) %>% paste0("%")
) +
scale_fill_discrete(guide = FALSE) +
ggtitle("Interaction between Tracking and Vocational index")
data_interaction %>%
mutate(linetype = group %>% as.factor,
colour = factor(colour, levels = order_colour)) %>%
ggplot(aes(x, y, colour = colour, linetype = linetype)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = colour, colour = NULL), alpha = 0.4) +
labs(x = "Tracking Index (SD)", y = "90/10 Achievement gap (SD)") +
scale_colour_discrete(
name = "Vocational index \n quantiles",
labels = seq(100, 0, -25) %>% paste0("%")
) +
scale_linetype_discrete(
name = "Vocational index \n quantiles",
labels = seq(100, 0, -25) %>% paste0("%")
) +
scale_fill_discrete(guide = FALSE) +
ggtitle("Interaction between Tracking and Vocational index")
data_interaction %>%
mutate(linetype = group %>% as.factor,
colour = factor(colour, levels = order_colour)) %>%
ggplot(aes(x, y)) +
geom_line(aes(colour = colour, linetype = linetype), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = colour), alpha = 0.4) +
labs(x = "Tracking Index (SD)", y = "90/10 Achievement gap (SD)") +
scale_colour_discrete(
name = "Vocational index \n quantiles",
labels = seq(100, 0, -25) %>% paste0("%")
) +
scale_linetype_discrete(
name = "Vocational index \n quantiles",
labels = seq(100, 0, -25) %>% paste0("%")
) +
scale_fill_discrete(guide = FALSE) +
ggtitle("Interaction between Tracking and Vocational index")
data_interaction %>%
distinct(group, colour)
order_colour <-
data_interaction %>%
distinct(group, colour) %>%
mutate(colour = colour) %>%
pull(colour)
data_interaction %>%
mutate(linetype = factor(group, levels = 5:1),
colour = factor(colour, levels = order_colour)) %>%
ggplot(aes(x, y)) +
geom_line(aes(colour = colour, linetype = linetype), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = colour), alpha = 0.4) +
labs(x = "Tracking Index (SD)", y = "90/10 Achievement gap (SD)") +
scale_colour_discrete(
name = "Vocational index \n quantiles",
labels = seq(100, 0, -25) %>% paste0("%")
) +
scale_linetype_discrete(
name = "Vocational index \n quantiles",
labels = seq(100, 0, -25) %>% paste0("%")
) +
scale_fill_discrete(guide = FALSE) +
ggtitle("Interaction between Tracking and Vocational index")
data_interaction %>%
mutate(linetype = factor(group, levels = 5:1),
colour = factor(colour, levels = order_colour)) %>%
ggplot(aes(x, y)) +
geom_line(aes(colour = colour, linetype = linetype), size = 1) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = colour), alpha = 0.4) +
labs(x = "Tracking Index (SD)", y = "90/10 Achievement gap (SD)") +
scale_colour_discrete(
name = "Vocational index \n quantiles",
labels = seq(0, 100, 25) %>% paste0("%")
) +
scale_linetype_discrete(
name = "Vocational index \n quantiles",
labels = seq(0, 100, 25) %>% paste0("%")
) +
scale_fill_discrete(guide = FALSE) +
ggtitle("Interaction between Tracking and Vocational index")
gaps <- c("90th/10th SES gap", "80th/20th SES gap", "70th/30th SES gap")
all_gaps_models <-
map(gaps, function(gap) {
ready_data_age <-
dif_data(complete_gaps, tracking_data, which_gap = gap) %>%
mutate(age_selection = ifelse(selage >= 15, 1, 0) %>% as.factor)
mod_tracking <-
brms::brm(
difference ~
ztrack +
zvoc +
ztrack:zvoc +
(1|year), family = gaussian(),
data = ready_data_age,
warmup = 1000, iter = 2000, chains = 5,
control = list(adapt_delta = 0.95)
)
mod_tracking
})
model_data_merged <-
map(all_gaps_models, ~ fixef(.x)[, c(1, 3, 4)] %>% as_tibble) %>%
setNames(gaps) %>%
enframe() %>%
unnest(value) %>%
mutate_if(is_double, round, 2) %>%
transmute(model = name,
terms = all_gaps_models[[1]] %>% fixef %>% row.names %>% rep(3),
estimate = Estimate,
lower = `2.5%ile`,
upper = `97.5%ile`)
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = NULL) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = NULL) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = NULL) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = "") +
scale_shape_discrete(name = "") +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(size = 2) +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = NULL) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = "") +
scale_shape_discrete(name = "") +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(size = 2) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = NULL) +
scale_shape_discrete(name = NULL) +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
# geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(size = 2) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = NULL) +
scale_shape_discrete(name = NULL) +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(size = 2) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = NULL) +
scale_shape_discrete(name = NULL) +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(size = 2.5) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = NULL) +
scale_shape_discrete(name = NULL) +
scale_er
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(size = 2.5) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = NULL) +
scale_shape_discrete(name = NULL) +
scale_er
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(size = 2.5) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = NULL) +
scale_shape_discrete(name = NULL) +
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model, shape = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(size = 2.5) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
scale_colour_discrete(name = NULL) +
scale_shape_discrete(name = NULL) +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
new_data %>%
left_join(sum_ready_data) %>%
mutate(age_selection = ifelse(age_selection == 1, ">= 15", "< 15")) %>%
ggplot(aes(num_tracks, avg_diff, fill = num_tracks)) +
geom_col(aes(y = pred, colour = num_tracks)) +
geom_errorbar(aes(ymin = pred_low, ymax = pred_high), width = 0.2) +
geom_point(colour = "red", shape = 8) +
geom_errorbar(aes(ymin = diff_low, ymax = diff_high), width = 0.2, colour = "red") +
facet_wrap(country ~ age_selection) +
scale_y_continuous(name = "90/10 SD gap", limits = c(0, 4)) +
scale_alpha(guide = F) +
scale_x_discrete(name = "Number of tracks", labels = c("> 1 track", "1 track")) +
scale_fill_manual(values = c("white", "white"), guide = F) +
scale_colour_manual(values = c("black", "black"), guide = F) +
ggtitle("Predicted 90/10 gap for different combinations of number of tracks and age of selection")
700 - 300
Sys.which('pdflatex')
?Sys.which
seq(0, 100, 25) %>% paste0("%")
library(tidyverse)
seq(0, 100, 25) %>% paste0("%")
seq(0, 100, 25) %>% paste0("%")
legend_labels <- seq(0, 100, 25) %>% paste0("%")
legend_labels[1]
legend_labels <- seq(0, 100, 25) %>% paste0("%")
legend_labels[1] <- paste0(legend_labels[1], " (no voc enrollment)")
legend_labels[5] <- paste0(legend_labels[5], " (high voc enrollment)")
legend_labels
plot_interaction <-
marginal_effects(stan_models[[length(stan_models)]],
effects = "ztrack:zvoc",
int_conditions = list(zvoc = quantile))
library(matrixStats)
library(knitr)
library(arm)
library(saves)
library(haven)
library(PISA2000lite)
library(PISA2003lite)
library(PISA2006lite)
library(PISA2009lite)
library(PISA2012lite)
library(intsvy)
library(cimentadaj) # devtools::install_github("cimentadaj/cimentadaj")
library(countrycode) # For region variable
library(car)
library(SAScii)
library(inequalityintsvy) # devtools::install_github("cimentadaj/inequalityintsvy")
library(lme4)
library(modelr)
library(ggrepel)
library(xtable)
library(ggthemes)
library(readxl)
library(inequalityintsvy)
library(brms)
library(tidyverse)
# source("./transform_data.R")
# Conf for PISA_2015
pisa2015_conf <- list(variables = list(pvlabelpref = "PV",
pvlabelsuff = "READ",
weightFinal = "W_FSTUWT",
weightBRR = "W_FSTURWT"),
parameters = list(cutoffs = c(357.77, 420.07, 482.38, 544.68, 606.99, 669.30),
percentiles = c(5, 10, 25, 75, 90, 95),
PVreps = 10,
BRRreps = 80,
weights = "BRR",
replication_scheme = 'pisa')
)
countries <- c("Finland",
"France",
# "New Zealand",
"Austria",
"Australia",
"Sweden",
# "Czech Republic",
"Canada",
"Hungary",
# "Iceland",
"Netherlands",
"Spain",
# "Belgium",
"Italy",
# "Norway",
"United Kingdom",
# "Greece",
"Denmark",
# "Israel",
"Poland",
"United States",
"Germany"
# "Turkey",
# "Russia"
)
ready_data <- dif_data(complete_gaps, tracking_data)
tracking_data <-
read_xlsx("./data/tracking.xlsx", sheet = "all_data") %>%
map_if(is_double, round, 2) %>%
as_tibble
dif_data <- function(my_data, tracking, which_gap = "90th/10th SES gap") {
my_data %>%
filter(type_test == "math", type == which_gap) %>%
select(wave, country, difference) %>%
rename(year = wave) %>%
mutate(year = as.character(year)) %>%
left_join(tracking_data, by = c("country" = "cntry_name")) %>%
mutate(num_tracks = ifelse(tracks15y == 1, 1, 0) %>% as.factor,
age_selection = selage) %>%
filter(!is.na(num_tracks), !is.na(age_selection), !is.na(difference))
}
formula_sequence <- function(dv, ivs, random_effect) {
formula_seq <-
lapply(1:length(ivs), function(x) {
paste0(dv ," ~ ", paste0(ivs[1:x], collapse = " + ") %>% paste0(" + ", random_effect))
}) %>%
lapply(as.formula)
formula_seq
}
stan_model_builder <- function(dv, iv, random, data) {
all_formulas <- formula_sequence(dv, iv, random)
mod_tracking <-
map(all_formulas, ~ {
brms::brm(
.x,
family = gaussian(),
data = data,
warmup = 1000, iter = 2000, chains = 5
)
})
}
stan_extractor <- function(models) {
coef_list <-
map(models, ~ {
broom::tidy(.x) %>%
.[grepl("^b_", .$term), ] %>%
map_if(is_double, round, 2) %>%
as_tibble %>%
transmute(term,
estimate = paste0(estimate, " (", lower, "/", upper, ")"))
})
coef_list
}
stan_table_builder <- function(models_extracted) {
intermediate_table <-
reduce(models_extracted, full_join, by = "term") %>%
setNames(c(" ", paste("Model", seq_len(models_extracted %>% length))))
row_order <-
setdiff(seq_len(nrow(intermediate_table)),
grep("Intercept", intermediate_table$` `)) %>%
`c`(grep("Intercept", intermediate_table$` `))
intermediate_table[row_order, ]
}
stan_table <- function(models) {
table_ready <-
models %>%
stan_extractor() %>%
stan_table_builder()
table_ready
}
table_details <- function(models) {
random_effect <- nrow(models[[length(models)]]$ranef) > 0
where_to_place <-
models[[length(models)]]$formula$formula %>%
as.character %>%
.[-(1:2)] %>%
stringr::str_split(" \\+ ") %>%
pluck(1) %>%
.[if (random_effect) -length(.) else 1:length(.)] %>%
length
r_square <-
paste0("\\hline ",
paste0("R square: & ",
paste0(map(models, ~ bayes_R2(.x)[1] %>% round(2) * 100) %>% paste0("\\%"),
collapse = " & ")), " \\\\")
n_obs <-
paste0(paste0(" Sample size: & ",
paste0(map(models, nobs), collapse = " & ")), " \\\\ \\hline")
command_to_row <- paste0(r_square, n_obs)
addtorow_two <- list(pos = list(pos = where_to_place + 1), command = command_to_row)
addtorow_two
}
ready_data_age <-
dif_data(complete_gaps, tracking_data) %>%
mutate(age_selection = ifelse(selage >= 15, 1, 0) %>% as.factor)
andrea_la_mandona <- function() {
"Jorge, ven aquí."
}
andrea_la_mandona()
1:10
mean(1:10)
andrea_la_mandona()
andrea_la_mandona <- function(andrea_ta_tranquila = TRUE) {
if (andrea_ta_tranquila == TRUE) {
"Ayyy Jorgeeeee, ven aquíiiiii"
} else {
"Jorge, ven aquí, carajo."
}
andrea_la_mandona()
andrea_la_mandona <- function(andrea_ta_tranquila = TRUE) {
if (andrea_ta_tranquila == TRUE) {
"Ayyy Jorgeeeee, ven aquíiiiii"
} else {
"Jorge, ven aquí, carajo."
}
}
andrea_la_mandona()
andrea_la_mandona(andrea_ta_tranquila = FALSE)
andrea_tuvo_un_mal_dia <- function(lo_esta = FALSE) {
if (lo_esta == TRUE) {
c("Marcela, no me joda.", andrea_la_mandona(andrea_ta_tranquila = FALSE))
} else {
andrea_la_mandona()
}
}
andrea_tuvo_un_mal_dia(lo_esta = TRUE)
andrea_tuvo_un_mal_dia <- function(lo_esta = FALSE) {
if (lo_esta == TRUE) {
paste0("Marcela, no me joda.", andrea_la_mandona(andrea_ta_tranquila = FALSE))
} else {
andrea_la_mandona()
}
}
andrea_tuvo_un_mal_dia(lo_esta = TRUE)
andrea_tuvo_un_mal_dia <- function(lo_esta = FALSE) {
if (lo_esta == TRUE) {
paste("Marcela, no me joda.", andrea_la_mandona(andrea_ta_tranquila = FALSE))
} else {
andrea_la_mandona()
}
}
andrea_tuvo_un_mal_dia(lo_esta = TRUE)
andrea_la_mandona <- function(andrea_ta_tranquila = TRUE) {
if (andrea_ta_tranquila == TRUE) {
"Ayyy Jorgeeeee, ven aquíiiiii"
} else {
"Jorge, ven aquí, carajo."
}
}
