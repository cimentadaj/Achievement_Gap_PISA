}
}
andrea_tuvo_un_mal_dia(lo_esta = TRUE)
andrea_tuvo_un_mal_dia <- function(lo_esta = FALSE) {
if (lo_esta == TRUE) {
paste0("Marcela, no me joda.", andrea_la_mandona(andrea_ta_tranquila = FALSE))
} else {
andrea_la_mandona()
}
}
andrea_tuvo_un_mal_dia(lo_esta = TRUE)
andrea_tuvo_un_mal_dia <- function(lo_esta = FALSE) {
if (lo_esta == TRUE) {
paste("Marcela, no me joda.", andrea_la_mandona(andrea_ta_tranquila = FALSE))
} else {
andrea_la_mandona()
}
}
andrea_tuvo_un_mal_dia(lo_esta = TRUE)
andrea_la_mandona <- function(andrea_ta_tranquila = TRUE) {
if (andrea_ta_tranquila == TRUE) {
"Ayyy Jorgeeeee, ven aquíiiiii"
} else {
"Jorge, ven aquí, carajo."
}
}
packrat::init()
packrat::init()
remove.packages("PKI")
packrat::init()
remove.packages("xts")
packrat::init()
remove.packages("beepr")
packrat::init()
remove.packages("survey")
packrat::init()
warnings()
packrat::status()
source("./transform_data.R")
packrat::set_opts(vcs.ignore.src = TRUE)
packrat::status()
packrat::on()
library(car)
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
packrat::snapshot()
packrat::init()
packrat::clean()
packrat::init()
packrat::snapshot()
packrat::init()
install.packages("car")
install.packages(mgcv)
install.packages("mgcv")
?library
.libPaths()
packrat::on
packrat::on()
getwd()
library(matrixStats)
library(knitr)
library(arm)
library(saves)
library(haven)
library(PISA2000lite)
library(PISA2003lite)
library(PISA2006lite)
library(PISA2009lite)
library(intsvy)
library(cimentadaj) # devtools::install_github("cimentadaj/cimentadaj")
library(countrycode) # For region variable
library(SAScii)
library(car)
library(inequalityintsvy) # devtools::install_github("cimentadaj/inequalityintsvy")
library(lme4)
library(modelr)
library(ggrepel)
library(xtable)
library(ggthemes)
library(readxl)
library(inequalityintsvy)
library(brms)
library(tidyverse)
.libPaths()
.Library
.Library.site
sum(5, 5)
remove.packages("car")
remove.packages("mgcv")
packrat::snapshot()
packrat::install("car")
packrat::install("")
packrat::install()
?packrat::install()
?packrat::install
packrat::install("https://cran.r-project.org/web/packages/car/index.html")
packrat::init()
packrat::on()
.Library
cat(.Library)
.libPaths()
.libPaths()
library("car", lib.loc="~/Downloads/gitrepo/Achievement_Gap_PISA/packrat/lib/x86_64-apple-darwin15.6.0/3.4.0")
detach("package:car", unload=TRUE)
remove.packages("car", lib="~/Downloads/gitrepo/Achievement_Gap_PISA/packrat/lib/x86_64-apple-darwin15.6.0/3.4.0")
packrat::init()
packrat::restore()
packrat::on()
library(car)
library(mgcv)
help("mgcv-package")
.Library.site
.libPaths()
.libPaths()[1]
getwd()
text <- readLines(con = "./paper/paper.tex")
text
packrat::off()
install.packages("car")
install.packages("brms")
install.packages("brms", dependencies = TRUE)
install.packages("xts")
install.packages("brms", dependencies = TRUE)
text <- readLines(con = "./paper/paper.tex")
text
?hunspell::hunspell_analyze()
?hunspell::hunspell_analyze
bad_words <- hunspell::hunspell(text, format = "latex")
hunspell::en_stats
bad_words
unlist(bad_words)
sort(unlist(bad_words))
?hunspell::hunspell_suggest()
?hunspell::hunspell_suggest
hunspell::en_stats
hunspell::en_stats <- c(hunspell::en_stats, "SES")
library(hunspell)
en_stats
en_stats <- c(en_stats, "SES")
bad_words <- hunspell::hunspell(text, format = "latex")
unlist(bad_words)
sort(unlist(bad_words))
en_stats
?en_stats
ignore_words <- en_stats
bad_words <- hunspell::hunspell(text, format = "latex")
bad_words <- hunspell::hunspell(text, format = "latex", ignore = ignore_words)
sort(unlist(bad_words))
ignore_words
c(ignore_words)
bad_words <- hunspell::hunspell(text, format = "latex", ignore = ignore_words)
sort(unlist(bad_words))
?hunspell_check
text <- readLines("./paper/paper.tex")
text
bad_words <- hunspell::hunspell(text, format = "latex", ignore = ignore_words)
unique(bad_words)
unlist(bad_words)
sort(unlist(bad_words))
bad_words <- hunspell::hunspell(text, format = "latex", ignore = ignore_words)
unlist(bad_words)
text <- readLines("./paper/paper.tex")
bad_words <- hunspell::hunspell(text, format = "latex", ignore = ignore_words)
unlist(bad_words)
sort(unlist(bad_words))
packrat::init()
packrat::on()
472 * 3
213 + 200 + 100
513 * 0.35
200 * 0.15
220 - 150
100 * 0.15
work <- readLines("./paper/*.tex")
work <- readLines("./paper/paper.tex")
work
.libPaths()
packrat::of()
packrat::off()
hunspell::hunspell(work, format = "latex")
unlist(hunspell::hunspell(work, format = "latex"))
sort(unlist(hunspell::hunspell(work, format = "latex")))
my_words <- c(hunspell::en_stats, "SES", "bayesian", "ISCED", "ESCS")
sort(unlist(hunspell::hunspell(work, format = "latex")))
sort(unlist(hunspell::hunspell(work, format = "latex", ignore = my_words)))
work <- readLines("./paper/paper.tex")
sort(unlist(hunspell::hunspell(work, format = "latex", ignore = my_words)))
packrat::on()
packrat::init()
r_make()
r_make()
drake::r_make()
r_outdated(r_args = list(show = FALSE))
r_outdated(r_args = list(show = FALSE))
r_vis_drake_graph(targets_only = TRUE, r_args = list(show = FALSE))
plan
f
r_make()
diagnose()
r_make()
renv::init()
r_make()
r_make()
r_make()
r_make()
r_make()
r_make()
r_make()
r_make()
diagnose("complete_data_topbottom")
r_make()
diagnose("complete_data_topbottom")
diagnose("complete_data_topbottom")
r_make()
diagnose("complete_data_topbottom")
diagnose("complete_data_topbottom")
r_make()
diagnose("sample_tables_topbottom")
r_make()
diagnose("sample_tables_topbottom")
rlang::last_trace()
rlang::last_error()
df <- readd(merged_data)
probs <- c(.1, .9)
selected = TRUE
cnts <- countries
countries
cnts <- countries
class(df)
probs
selected
length(df)
pisa_conf
cnt_to_Bind[[6]]
as.character(cnt_to_bind[[6]]$country)
r_make()
r_make()
config <- drake_config(plan)
vis_drake_graph(config)
config <- drake_config(plan)
vis_drake_graph(config)
results_math <- readd(results_math)
complete_data_topbottom <- readd(complete_data_topbottom)
sample_tables_topbottom <- readd(sample_tables_topbottom)
table_coming
xtable_updated
r_make()
r_make()
r_make()
diagnose("tracking_data")
r_make()
diagnose("tracking_data")
r_make()
countries
r_make()
r_make()
r_make()
diagnose("p1_evolution_gaps")
r_make()
renv::snapshot()
y
renv::status()
r_make()
r_make()
r_make()
r_make()
r_make()
diagnose("p2_perc_change")
tst <- readd(top_bottom_perc)
tst
df <- tst
rm(tst)
r_make()
diagnose("p2_perc_change")
df
df
tst <- df %>%
  enframe(name = "country")
tst
tst$value[[1]]
r_make()
diagnose("p2_perc_change")
r_make()
readd(p2_perc_change)
readd(p1_evolution_gaps)
r_make()
diagnose("p3_evolution_ses")
r_make()
diagnose("ordered_cnt")
r_make()
diagnose("ordered_cnt")
diagnose("ordered_cnt")
r_make()
diagnose("p3_evolution_ses")
r_make()
readd("p3_evolution_ses")
r_make()
r_make()
r_make()
diagnose("p4_rate_change")
r_make()
readd(p4_rate+change)
readd(p4_rate_change)
r_make()
r_make()
diagnose("mod1_table")
r_make()
diagnose("base_ready_data")
r_make()
diagnose("mod3_cumulative")
r_make()
r_make()
diagnose("mod3_cumulative")
readd(mod1_complete)
r_make()
diagnose("mod1_complete_tracking")
envir <- new.env(parent = globalenv())

r_make(envir = envir)
r_make(r_args = list(envir = envir))
envir
new_envir <- new.env(parent = globalenv())
r_make(r_args = list(envir = new_envir))
new_envir
r_make()
diagnose("mod1_complete_tracking")
r_make()
diagnose("mod1_complete_tracking")
ready_data_age <- readd(ready_data_age)
mod1 <- complete_tracking_model(ready_data_age)
stan_model_builder
class(ready_data_age)
mod1 <- complete_tracking_model(ready_data_age)
mod1 <- complete_tracking_model(ready_data_age)
pryr::mem_used()
r_make()
diagnose("mod1_complete_tracking")
r_make()
diagnose("mod1_complete_tracking")
r_make()
diagnose("mod1_complete_tracking")
r_make
r_drake
drake:::r_drake
r_make()
diagnose("mod1_complete_tracking")
r_make()
make()
make(plan)
r_make()
r_make()
r_make()
r_make()
library(clustermq)
r_make()
r_make()
r_make()
diagnose(mod1)
r_make()
r_make()
r_make()
plan
mtcars
mod1
plan
interactive()
source("R/packages.R")
source("R/functions.R")
source("R/plan.R")
config <- drake_config(plan)
vis_drake_graph(config)
plan
r_make()
clean()
clean()
r_make()
r_make()
r_make()
r_make()
r_make()
r_make()
clean()
r_make()
clean(); 1
r_make()
clean()
r_make()
r_make()
r_make()
r_make()
outdated()
r_make()
r_make()
r_make()
r_make()
readd(mod1_table)
readd(mod2_table)
readd(mod3_table)
loadd(merged_data)
ls()
class(merged_data)
pryr::mem_used()
pryr::mem_used()
class(merged_data[[1]])
merged_data[[1]]
merged_data[[1]] %>% select(high_edu_broad)
merged_data[[1]] %>% select(high_edu_broad)
merged_data[[1]]
loadd(res_math)
res_math %>% class()
res_math %>% pull(1) %>% class()
res_math %>% .[[1]] %>% class()
res_math[[1]] %>% class()
str(res_math[[1]])
res_math[1:2]
res_math[1:3]
res_math
merged_data[[1]]
length(merged_data)
rm(merged_data)
loadd(escs_data_trans)
escs_data_trans[[1]]
escs_data_trans[[2]]
escs_data_trans[[3]]
pryr::mem_used()
ls()
rm(res_math)
merged_df
raw_data <- raw_data_dir
student2015
student2015 %>% select(CNT)
student2015 %>% select(COUNTRY)
student2015 %>% names()
student2015 %>% count(ST002Q01TA)
student2015 %>% count(ST002Q01TA)
student2015 %>% count(PROGN)
student2015 <- student2015 %>% as.data.frame()
student2015[1:5, 1:5]
student2015 %>% count(PROGN)
count
unloadNamespace("matrixStats")
unloadNamespace("loo")
student2015 %>% dplyr::count(PROGN)
student2015 %>% dplyr::count(ST002Q01TA)
rm(student2015)
pryr::mem_used()
ls()
student2012
student2012 %>% dplyr::count(PROGN)
rm(student2012)
pryr::mem_used()
student2009 %>% as_tibble()
student2009 %>% as_tibble() %>% dplyr::count(PROGN)
unloadNamespace("PISA2009lite")
rmt(student2009)
rm(student2009)
pryr::mem_used()
student2006 %>% as_tibble() %>% dplyr::count(PROGN)
unloadNamespace("PISA2006lite")
student2003 %>% dplyr::count(PROGN)
unloadNamespace("PISA2003lite")
student2000 %>% dplyr::count(PROGN)
math2000 %>% dplyr::count(PROGN)
math2000 %>% as_tibble()
unloadNamespace("PISA2000lite")
pryr::mem_used
pryr::mem_used()
select(mtcars, "")
dplyr::select(mtcars, "")
dplyr::select(mtcars, empty())
dplyr::select(mtcars, random)
dplyr::select(mtcars, "random")
dplyr::select(mtcars, random)
dplyr::select(mtcars, cyl)
r_make()
r_make()
r_make()
drake_config()
drake_config(plan)
outdated(plan)
outdated()
outdated(drake_config(plan))
r_make()
r_make()
outdated(drake_config(dconf))
outdated(dconf)
plan
clean(pisa_data)
r_make()
r_make()
loadd(escs_data_trans)
merged_df
merged_df
escs_data_trans
escs_data_trans[[1]] %>% distinct(country)
clean(pisa_data)
r_make()
r_make()
r_make()
