count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced %in% c(1, 7)) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
full_cnt %>%
filter(!is.na(escs_dummy)) %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced %in% c(1, 7)) %>%
ungroup() %>%
select(-new_hisced)
full_cnt %>%
filter(!is.na(escs_dummy)) %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced %in% c(1, 7)) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n)
full_cnt %>%
count(year, country, new_hisced) %>%
filter(new_hisced %in% c(1, 7))
full_cnt %>%
filter(!is.na(escs_dummy)) %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced %in% c(1, 7)) %>%
ungroup() %>%
select(-new_hisced)
full_cnt %>%
filter(!is.na(escs_dummy)) %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced %in% c(1, 7)) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n)
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy)
full_cnt
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7))
selected_cnt <- map(cnt_to_bind, ~ select(.x, country, new_hisced, escs_dummy))
full_cnt <-
selected_cnt %>%
enframe() %>%
unnest(value) %>%
mutate(year = dplyr::recode(.$name,
`1` = 2000,
`2` = 2003,
`3` = 2006,
`4` = 2009,
`5` = 2012,
`6` = 2015))
sample_size <-
full_cnt %>%
count(year, country)
sample_Size
sample_size
high_low_sample <-
full_cnt %>%
count(year, country, new_hisced) %>%
filter(new_hisced %in% c(1, 7)) %>%
spread(new_hisced, n) %>%
rename(low_isced = `1`, high_isced = `7`)
high_low_sample
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy)
View(full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy))
View(full_cnt)
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy)
table(full_cnt$new_hisced)
class(full_cnt$new_hisced)
class(full_cnt$country)
full_cnt <-
selected_cnt %>%
enframe() %>%
unnest(value) %>%
mutate(year = as.character(dplyr::recode(.$name,
`1` = 2000,
`2` = 2003,
`3` = 2006,
`4` = 2009,
`5` = 2012,
`6` = 2015)))
full_cnt <-
selected_cnt %>%
enframe() %>%
unnest(value) %>%
mutate(year = as.character(dplyr::recode(.$name,
`1` = 2000,
`2` = 2003,
`3` = 2006,
`4` = 2009,
`5` = 2012,
`6` = 2015)))
sample_size <-
full_cnt %>%
count(year, country)
high_low_sample <-
full_cnt %>%
count(year, country, new_hisced) %>%
filter(new_hisced %in% c(1, 7)) %>%
spread(new_hisced, n) %>%
rename(low_isced = `1`, high_isced = `7`)
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
class(full_cnt$country)
class(full_cnt$year)
View(filter(full_cnt, country == "Canada", year == "2000"))
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy) %>%
ungroup() %>%
select(-new_hisced)
View(full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy) %>%
ungroup() %>%
select(-new_hisced))
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7))
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy)
full_cnt <-
selected_cnt %>%
enframe() %>%
unnest(value) %>%
mutate(year = as.character(dplyr::recode(.$name,
`1` = 2000,
`2` = 2003,
`3` = 2006,
`4` = 2009,
`5` = 2012,
`6` = 2015)),
escs_dummy = as.character(escs_dummy))
sample_size <-
full_cnt %>%
count(year, country)
high_low_sample <-
full_cnt %>%
count(year, country, new_hisced) %>%
filter(new_hisced %in% c(1, 7)) %>%
spread(new_hisced, n) %>%
rename(low_isced = `1`, high_isced = `7`)
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
full_cnt
sample_size
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy)
s <- selected_cnt %>%
enframe() %>%
unnest(value) %>%
mutate(year = as.character(dplyr::recode(.$name,
`1` = 2000,
`2` = 2003,
`3` = 2006,
`4` = 2009,
`5` = 2012,
`6` = 2015)),
escs_dummy = as.character(escs_dummy))
s
s
s %>% distinct(escs_dummy)
s %>% distinct(year)
s %>% distinct(new_hisced)
selected_cnt <- map(cnt_to_bind, ~ select(.x, country, high_edu_broad, new_hisced, escs_dummy))
full_cnt <-
selected_cnt %>%
enframe() %>%
unnest(value) %>%
mutate(year = as.character(dplyr::recode(.$name,
`1` = 2000,
`2` = 2003,
`3` = 2006,
`4` = 2009,
`5` = 2012,
`6` = 2015)),
escs_dummy = as.character(escs_dummy))
sample_size <-
full_cnt %>%
count(year, country)
sample_size
high_low_sample <-
full_cnt %>%
count(year, country, new_hisced) %>%
filter(new_hisced %in% c(1, 7)) %>%
spread(new_hisced, n) %>%
rename(low_isced = `1`, high_isced = `7`)
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, high_edu_broad, new_hisced, escs_dummy)
View(full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, high_edu_broad, new_hisced, escs_dummy))
selected_cnt
high_low_sample
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7)) %>%
count(year, country, new_hisced, escs_dummy)
full_cnt %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7))
full_cnt %>%
count(year, country, new_hisced, escs_dummy)
View(full_cnt %>%
count(year, country, new_hisced, escs_dummy))
View(full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(!is.na(escs_dummy), new_hisced == 7 & escs_dummy == 1, new_hisced == 1 & escs_dummy == 0) %>%
ungroup())
full_cnt %>%
count(year, country, new_hisced, escs_dummy)
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(!is.na(escs_dummy), new_hisced == 7 & escs_dummy == 1, new_hisced == 1 & escs_dummy == 0)
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(!is.na(escs_dummy), new_hisced == 7 & escs_dummy == 1)
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(!is.na(escs_dummy), new_hisced %in% c(1, 7) & escs_dummy %in% c(1, 0))
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(!is.na(escs_dummy), new_hisced == 7 & escs_dummy != 0, new_hisced == 1 & escs_dummy != 1)
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced == 7 & escs_dummy != 0, new_hisced == 1 & escs_dummy != 1)
View(full_cnt %>%
count(year, country, new_hisced, escs_dummy))
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced == 7 & escs_dummy != 0 | new_hisced == 1 & escs_dummy != 1)
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced == 7 & escs_dummy != 0 | new_hisced == 1 & escs_dummy != 1) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
ses_sample <-
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced == 7 & escs_dummy != 0 | new_hisced == 1 & escs_dummy != 1) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
ses_sample
left_join(sample_size, high_low_sample)
left_join(sample_size, high_low_sample) %>%
left_join(ses_sample)
quantile_missing <- function(df, weights) {
df_lower <- filter(df, new_hisced %in% c(1, 2))
df_upper <- filter(df, new_hisced == 7)
quan_lower <- try(Hmisc::wtd.quantile(df_lower$escs_trend,
weights = df_lower[[weights]],
probs = c(0.30)))
quan_upper <- try(Hmisc::wtd.quantile(df_upper$escs_trend,
weights = df_upper[[weights]],
probs = c(0.70)))
if (any("try-error" %in% c(class(quan_lower), class(quan_upper)))) {
return(c(NA, NA))
} else {
return(c(quan_lower[1], quan_upper[1]))
}
}
test_diff <- function(df, reliability, test) {
map2(df, reliability, function(.x, .y) {
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
country_split <- split(.x, .x$country)
country_list <- map(country_split, function(country) {
print(unique(country$country))
# In some countries the quan can't be estimated because of very few obs.
# The function doesn't stop but returns two NA's.
quan <- quantile_missing(country, weights_var)
# It's very important to create a variable that returns the number of observations of this dummy
# For each country. Possibly to weight by the number of observations.
country$escs_dummy <-
with(country, case_when(escs_trend >= quan[2] ~ 1,
escs_trend <= quan[1] ~ 0))
country
})
.x <-
enframe(country_list) %>%
unnest(value)
.x <-
.x %>%
select(wave, matches(paste0("^PV.*", test, "$")), escs_dummy,
country, one_of(weights_var),
AGE)
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
# Calculate median math score of all PV's
.x$dv <- apply(.x[test_vars], 1, median, na.rm = T)
# Should I estimate the model separately by country?
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
# Take residuals of model and divide by rmse. Multiply that by
# 1 / sqrt(reliability of each survey), which is .y in the loop.
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
mod2 <-
lmer(adj_pvnum ~ escs_dummy + (1 + escs_dummy | country),
data = .x,
weights = .x[[weights_var]])
# Take the country coefficients (absolute coefficients)
country_coef <-
coef(mod2)$country %>%
rownames_to_column() %>%
gather(escs_dummy, Mean, -rowname) %>%
mutate(escs_dummy = dplyr::recode(escs_dummy,
`(Intercept)` = "0",
`escs_dummy` = "1"))
# Take the absolute country standard errors
se <-
se.coef(mod2)$country %>%
as.data.frame() %>%
rownames_to_column() %>%
gather(escs_dummy, s.e., -rowname) %>%
mutate(escs_dummy = dplyr::recode(escs_dummy,
`(Intercept)` = "0",
`escs_dummy` = "1"))
results <-
inner_join(country_coef, se, by = c("rowname", "escs_dummy")) %>%
rename(country = rowname) %>%
arrange(country, escs_dummy)
message(paste0(unique(.x$wave), " modeling done"))
results
})
}
i <- 3
vals <- intersect(unique(adapted_year_data[[1]]$country), unique(adapted_year_data[[2]]$country))
while (i < 7) {
vals <- intersect(vals, unique(adapted_year_data[[i]]$country))
i <- i + 1
}
vals
subset_cnts <- map(adapted_year_data, ~ filter(.x, country %in% vals))
cnt_to_bind <-
map(subset_cnts, function(df) {
print(unique(df$wave))
conf <- if (unique(df$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
split_df <- split(df, df$country)
split_df_two <-
map(split_df, ~ {
# In some countries the quan can't be estimated because of very few obs.
# The function doesn't stop but returns two NA's.
quan <- quantile_missing(.x, weights_var)
# It's very important to create a variable that returns the number of observations of this dummy
# For each country. Possibly to weight by the number of observations.
.x$escs_dummy <-
with(.x, case_when(escs_trend >= quan[2] ~ 1,
escs_trend <= quan[1] ~ 0))
.x
})
unsplit_df <- split_df_two %>% enframe() %>% unnest(value)
unsplit_df
})
selected_cnt <- map(cnt_to_bind, ~ select(.x, country, high_edu_broad, new_hisced, escs_dummy))
full_cnt <-
selected_cnt %>%
enframe() %>%
unnest(value) %>%
mutate(year = as.character(dplyr::recode(.$name,
`1` = 2000,
`2` = 2003,
`3` = 2006,
`4` = 2009,
`5` = 2012,
`6` = 2015)),
escs_dummy = as.character(escs_dummy))
sample_size <-
full_cnt %>%
count(year, country)
high_low_sample <-
full_cnt %>%
count(year, country, new_hisced) %>%
filter(new_hisced %in% c(1, 7)) %>%
spread(new_hisced, n) %>%
rename(low_isced = `1`, high_isced = `7`)
ses_sample <-
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced == 7 & escs_dummy != 0 | new_hisced == 1 & escs_dummy != 1) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
left_join(sample_size, high_low_sample) %>%
left_join(ses_sample)
m <- left_join(sample_size, high_low_sample) %>%
left_join(ses_sample)
View(m)
m <- left_join(sample_size, high_low_sample) %>%
left_join(ses_sample) %>%
arrange(year, country)
View(m)
m <- left_join(sample_size, high_low_sample) %>%
left_join(ses_sample) %>%
arrange(country, year)
View(m)
quantile_missing <- function(df, weights) {
df_lower <- filter(df, new_hisced %in% c(1, 2))
df_upper <- filter(df, new_hisced == 7)
quan_lower <- try(Hmisc::wtd.quantile(df_lower$escs_trend,
weights = df_lower[[weights]],
probs = c(0.50)))
quan_upper <- try(Hmisc::wtd.quantile(df_upper$escs_trend,
weights = df_upper[[weights]],
probs = c(0.70)))
if (any("try-error" %in% c(class(quan_lower), class(quan_upper)))) {
return(c(NA, NA))
} else {
return(c(quan_lower[1], quan_upper[1]))
}
}
i <- 3
vals <- intersect(unique(adapted_year_data[[1]]$country), unique(adapted_year_data[[2]]$country))
while (i < 7) {
vals <- intersect(vals, unique(adapted_year_data[[i]]$country))
i <- i + 1
}
subset_cnts <- map(adapted_year_data, ~ filter(.x, country %in% vals))
cnt_to_bind <-
map(subset_cnts, function(df) {
print(unique(df$wave))
conf <- if (unique(df$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
split_df <- split(df, df$country)
split_df_two <-
map(split_df, ~ {
# In some countries the quan can't be estimated because of very few obs.
# The function doesn't stop but returns two NA's.
quan <- quantile_missing(.x, weights_var)
# It's very important to create a variable that returns the number of observations of this dummy
# For each country. Possibly to weight by the number of observations.
.x$escs_dummy <-
with(.x, case_when(escs_trend >= quan[2] ~ 1,
escs_trend <= quan[1] ~ 0))
.x
})
unsplit_df <- split_df_two %>% enframe() %>% unnest(value)
unsplit_df
})
selected_cnt <- map(cnt_to_bind, ~ select(.x, country, high_edu_broad, new_hisced, escs_dummy))
full_cnt <-
selected_cnt %>%
enframe() %>%
unnest(value) %>%
mutate(year = as.character(dplyr::recode(.$name,
`1` = 2000,
`2` = 2003,
`3` = 2006,
`4` = 2009,
`5` = 2012,
`6` = 2015)),
escs_dummy = as.character(escs_dummy))
sample_size <-
full_cnt %>%
count(year, country)
high_low_sample <-
full_cnt %>%
count(year, country, new_hisced) %>%
filter(new_hisced %in% c(1, 7)) %>%
spread(new_hisced, n) %>%
rename(low_isced = `1`, high_isced = `7`)
ses_sample <-
full_cnt %>%
count(year, country, new_hisced, escs_dummy) %>%
filter(new_hisced == 7 & escs_dummy != 0 | new_hisced == 1 & escs_dummy != 1) %>%
ungroup() %>%
select(-new_hisced) %>%
spread(escs_dummy, n) %>%
rename(low_low_isced = `0`, high__high_isced = `1`)
m <- left_join(sample_size, high_low_sample) %>%
left_join(ses_sample) %>%
arrange(country, year)
m
