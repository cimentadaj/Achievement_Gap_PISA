.[-(1:2)] %>%
stringr::str_split(" \\+ ") %>%
pluck(1)
switch(random_effect, TRUE = -length(.), FALSE = 1:length(.))
switch(random_effect, "TRUE" = -length(.), "FALSE" = 1:length(.))
models[[length(models)]]$formula$formula %>%
as.character %>%
.[-(1:2)] %>%
stringr::str_split(" \\+ ") %>%
pluck(1) %>%
.[switch(random_effect, "TRUE" = -length(.), "FALSE" = 1:length(.))]
models[[length(models)]]$formula$formula %>%
as.character %>%
.[-(1:2)] %>%
stringr::str_split(" \\+ ") %>%
pluck(1) %>%
.[if (random_effect) -length(.) else 1:length(.)]
where_to_place <-
models[[length(models)]]$formula$formula %>%
as.character %>%
.[-(1:2)] %>%
stringr::str_split(" \\+ ") %>%
pluck(1) %>%
.[if (random_effect) -length(.) else 1:length(.)] %>%
length
where_to_place
table_details <- function(models) {
random_effect <- nrow(models[[length(models)]]$ranef) > 0
where_to_place <-
models[[length(models)]]$formula$formula %>%
as.character %>%
.[-(1:2)] %>%
stringr::str_split(" \\+ ") %>%
pluck(1) %>%
.[if (random_effect) -length(.) else 1:length(.)] %>%
length
r_square <-
paste0("\\hline ",
paste0("R square: & ",
paste0(map(models, ~ bayes_R2(.x)[1] %>% round(2) * 100) %>% paste0("\\%"),
collapse = " & ")), " \\\\")
n_obs <-
paste0(paste0(" Sample size: & ",
paste0(map(models, nobs), collapse = " & ")), " \\\\ \\hline")
command_to_row <- paste0(r_square, n_obs)
addtorow_two <- list(pos = list(pos = where_to_place + 1), command = command_to_row)
addtorow_two
}
all_track_models %>%
stan_table() %>%
mutate(" " = c(
"Only 1 track",
"Age selection >= 15",
"% of curric tracked",
"Vocational Index",
"Intercept"
)) %>%
xtable() %>%
print.xtable(
include.rownames = FALSE,
add.to.row = table_details(all_track_models)
)
all_gaps_models_cum %>%
stan_table() %>%
mutate(" " = c(
"Track Index",
"Vocational Index",
"Intercept"
)) %>%
setNames(c(" ", gsub(" SES gap", "", gaps))) %>%
xtable() %>%
print.xtable(
include.rownames = FALSE,
add.to.row = table_details(all_gaps_models_cum)
)
library(matrixStats)
library(knitr)
library(arm)
library(saves)
library(haven)
library(PISA2000lite)
library(PISA2003lite)
library(PISA2006lite)
library(PISA2009lite)
library(PISA2012lite)
library(intsvy)
library(cimentadaj) # devtools::install_github("cimentadaj/cimentadaj")
library(countrycode) # For region variable
library(car)
library(SAScii)
library(inequalityintsvy) # devtools::install_github("cimentadaj/inequalityintsvy")
library(lme4)
library(modelr)
library(ggrepel)
library(xtable)
library(ggthemes)
library(readxl)
library(inequalityintsvy)
library(brms)
library(tidyverse)
# source("./transform_data.R")
# Conf for PISA_2015
pisa2015_conf <- list(variables = list(pvlabelpref = "PV",
pvlabelsuff = "READ",
weightFinal = "W_FSTUWT",
weightBRR = "W_FSTURWT"),
parameters = list(cutoffs = c(357.77, 420.07, 482.38, 544.68, 606.99, 669.30),
percentiles = c(5, 10, 25, 75, 90, 95),
PVreps = 10,
BRRreps = 80,
weights = "BRR",
replication_scheme = 'pisa')
)
countries <- c("Finland",
"France",
# "New Zealand",
"Austria",
"Australia",
"Sweden",
# "Czech Republic",
"Canada",
"Hungary",
# "Iceland",
"Netherlands",
"Spain",
# "Belgium",
"Italy",
# "Norway",
"United Kingdom",
# "Greece",
"Denmark",
# "Israel",
"Poland",
"United States",
"Germany"
# "Turkey",
# "Russia"
)
results_math_80 <- read_rds("./paper/data/math_80.Rdata")
results_read_80 <- read_rds("./paper/data/read_80.Rdata")
results_math_topmid_80 <- read_rds("./paper/data/math_topmid_80.Rdata")
results_read_topmid_80 <- read_rds("./paper/data/read_topmid_80.Rdata")
results_math_midbottom_80 <- read_rds("./paper/data/math_midbottom_80.Rdata")
results_read_midbottom_80 <- read_rds("./paper/data/read_midbottom_80.Rdata")
results_math_70 <- read_rds("./paper/data/math_70.Rdata")
results_read_70 <- read_rds("./paper/data/read_70.Rdata")
results_math_topmid_70 <- read_rds("./paper/data/math_topmid_70.Rdata")
results_read_topmid_70 <- read_rds("./paper/data/read_topmid_70.Rdata")
results_math_midbottom_70 <- read_rds("./paper/data/math_midbottom_70.Rdata")
results_read_midbottom_70 <- read_rds("./paper/data/read_midbottom_70.Rdata")
complete_data_topbottom_80 <-
pisa_preparer(results_math_80, results_read_80) %>%
mutate(type = "80th/20th SES gap")
complete_data_topmid_80 <-
pisa_preparer(results_math_topmid_80, results_read_topmid_80) %>%
mutate(type = "80th/50th SES gap")
complete_data_midbottom_80 <-
pisa_preparer(results_math_midbottom_80, results_read_midbottom_80) %>%
mutate(type = "50th/20th SES gap")
######
complete_data_topbottom_70 <-
pisa_preparer(results_math_70, results_read_70) %>%
mutate(type = "70th/30th SES gap")
complete_data_topmid_70 <-
pisa_preparer(results_math_topmid_70, results_read_topmid_70) %>%
mutate(type = "70th/50th SES gap")
complete_data_midbottom_70 <-
pisa_preparer(results_math_midbottom_70, results_read_midbottom_70) %>%
mutate(type = "50th/30th SES gap")
#####
complete_gaps <-
complete_data_topbottom %>%
bind_rows(complete_data_topbottom_80) %>%
bind_rows(complete_data_topbottom_70)
<<complete_tracking_model>>=
tracking_data <-
read_xlsx("./paper/data/tracking.xlsx", sheet = "all_data") %>%
map_if(is_double, round, 2) %>%
as_tibble
dif_data <- function(my_data, tracking, central, which_gap = "90th/10th SES gap") {
my_data %>%
filter(type_test == "math", type == which_gap) %>%
select(wave, country, difference) %>%
rename(year = wave) %>%
mutate(year = as.character(year)) %>%
left_join(tracking_data, by = c("country" = "cntry_name")) %>%
left_join(central_examination) %>%
mutate(num_tracks = ifelse(tracks15y == 1, 1, 0) %>% as.factor,
age_selection = selage) %>%
filter(!is.na(num_tracks), !is.na(age_selection), !is.na(difference))
}
formula_sequence <- function(dv, ivs, random_effect) {
formula_seq <-
lapply(1:length(ivs), function(x) {
paste0(dv ," ~ ", paste0(ivs[1:x], collapse = " + ") %>% paste0(" + ", random_effect))
}) %>%
lapply(as.formula)
formula_seq
}
stan_model_builder <- function(dv, iv, random, data) {
all_formulas <- formula_sequence(dv, iv, random)
mod_tracking <-
map(all_formulas, ~ {
brms::brm(
.x,
family = gaussian(),
data = data,
warmup = 1000, iter = 2000, chains = 5
)
})
}
stan_extractor <- function(models) {
coef_list <-
map(models, ~ {
broom::tidy(.x) %>%
.[grepl("^b_", .$term), ] %>%
map_if(is_double, round, 2) %>%
as_tibble %>%
transmute(term,
estimate = paste0(estimate, " (", lower, "/", upper, ")"))
})
coef_list
}
stan_table_builder <- function(models_extracted) {
intermediate_table <-
reduce(models_extracted, full_join, by = "term") %>%
setNames(c(" ", paste("Model", seq_len(models_extracted %>% length))))
row_order <-
setdiff(seq_len(nrow(intermediate_table)),
grep("Intercept", intermediate_table$` `)) %>%
`c`(grep("Intercept", intermediate_table$` `))
intermediate_table[row_order, ]
}
stan_table <- function(models) {
table_ready <-
models %>%
stan_extractor() %>%
stan_table_builder()
table_ready
}
table_details <- function(models) {
random_effect <- nrow(models[[length(models)]]$ranef) > 0
where_to_place <-
models[[length(models)]]$formula$formula %>%
as.character %>%
.[-(1:2)] %>%
stringr::str_split(" \\+ ") %>%
pluck(1) %>%
.[if (random_effect) -length(.) else 1:length(.)] %>%
length
r_square <-
paste0("\\hline ",
paste0("R square: & ",
paste0(map(models, ~ bayes_R2(.x)[1] %>% round(2) * 100) %>% paste0("\\%"),
collapse = " & ")), " \\\\")
n_obs <-
paste0(paste0(" Sample size: & ",
paste0(map(models, nobs), collapse = " & ")), " \\\\ \\hline")
command_to_row <- paste0(r_square, n_obs)
addtorow_two <- list(pos = list(pos = where_to_place + 1), command = command_to_row)
addtorow_two
}
ready_data_age <-
dif_data(complete_gaps, tracking_data, central_examination) %>%
mutate(age_selection = ifelse(selage >= 15, 1, 0) %>% as.factor)
all_track_models <-
stan_model_builder(
dv = "difference",
iv = c("num_tracks", "age_selection", "I(length > 0)", "zvoc"),
random = "(1 | year)",
data = ready_data_age
)
all_track_models %>%
stan_table() %>%
mutate(" " = c(
"Only 1 track",
"Age selection >= 15",
"% of curric tracked",
"Vocational Index",
"Intercept"
)) %>%
xtable() %>%
print.xtable(
include.rownames = FALSE,
add.to.row = table_details(all_track_models)
)
@
<<graph_complete_tracking_model>>=
# This is the closest I could get to getting vif's fro the last model:
lm(difference ~ num_tracks + age_selection + I(length > 0) + zvoc,
data = ready_data_age) %>%
vif()
mod_tracking_ext <-
brms::brm(formula_seq[[4]],
family = gaussian(),
data = ready_data_age,
warmup = 1000, iter = 2000, chains = 5,
control = list(adapt_delta = 0.90)
)
new_data <-
ready_data_age %>%
with(crossing(country = countries,
num_tracks = unique(num_tracks),
age_selection = unique(age_selection),
zvoc = mean(zvoc, na.rm = TRUE),
length = typical(length > 0),
year = "2009"))
predictions <- posterior_predict(mod_tracking_ext, newdata = new_data)
sd_obs <- colSds(predictions)
new_data <-
new_data %>%
mutate(
pred = colMeans(predictions),
pred_low = pred - (2 * sd_obs),
pred_high = pred + (2 * sd_obs)
)
sum_ready_data <-
ready_data_age %>%
group_by(country, num_tracks, age_selection) %>%
summarize(avg_diff = mean(difference),
diff_low = avg_diff - 2 * sd(difference),
diff_high = avg_diff + 2 * sd(difference)) %>%
ungroup()
new_data %>%
left_join(sum_ready_data) %>%
mutate(age_selection = ifelse(age_selection == 1, ">= 15", "< 15")) %>%
ggplot(aes(num_tracks, avg_diff, fill = num_tracks)) +
geom_errorbar(aes(ymin = diff_low, ymax = diff_high), width = 0.2, colour = "red") +
geom_point(colour = "red") +
geom_col(aes(y = pred, alpha = 0.4)) +
geom_errorbar(aes(ymin = pred_low, ymax = pred_high), width = 0.2) +
facet_wrap(country ~ age_selection) +
scale_y_continuous(name = "90/10 SD gap", limits = c(0, 4)) +
scale_alpha(guide = F) +
scale_x_discrete(name = "Number of tracks", labels = c("> 1 track", "1 track")) +
scale_fill_manual(values = c("orangered2", "blue3"), guide = F) +
ggtitle("Predicted 90/10 gap for different combinations of number of tracks and age of selection")
@
<<counterfactual_tracking>>=
pred_avg_diff<-
new_data %>%
left_join(sum_ready_data) %>%
filter(!is.na(avg_diff) | num_tracks == 1 & age_selection == 1) %>%
select(country, num_tracks, age_selection, pred, avg_diff)
track_should_change <- pred_avg_diff$country[pred_avg_diff$country %>% duplicated]
avg_diff_data <-
pred_avg_diff %>%
filter(country %in% track_should_change) %>%
transmute(country,
avg_diff = ifelse(avg_diff %>% is.na, pred, avg_diff),
combn = paste0(num_tracks, "_", age_selection)) %>%
filter(combn != "1_1")
final_avg_diff_table <-
avg_diff_data %>%
left_join(pred_avg_diff %>%
filter(country %in% track_should_change & (num_tracks == 1 & age_selection == 1)) %>%
select(country, pred), by = "country") %>%
select(country, combn, avg_diff, pred) %>%
separate(combn, c("num_tracks", "age_selection"), sep = "_") %>%
transmute(
Country = country,
`Number of tracks` = ifelse(num_tracks == 0, "More than one track", "One track"),
`Age of selection` = ifelse(age_selection == 1, "15 or more", "Less than 15"),
`Inequality` = avg_diff %>% round(3),
`Predicted` = pred %>% round(3),
`% reduction` = (((`Inequality` - `Predicted`)/ `Inequality`) * 100) %>%
ceiling %>% paste0("%")
)
xtable(final_avg_diff_table) %>% print.xtable(
include.rownames = FALSE
)
@
<<interaction_model>>=
ready_data <- dif_data(complete_gaps, tracking_data, central_examination)
stan_models <-
stan_model_builder(
dv = "difference",
iv = c("ztrack", "zvoc", "ztrack:zvoc"),
random = "(1 | year)",
data = ready_data
)
table_ready <-
stan_models %>%
stan_table() %>%
mutate(" " = c(
"Tracking Index",
"Vocational Index",
"Trackin * Vocational Index",
"Intercept"
)) %>%
xtable() %>%
print.xtable(
include.rownames = FALSE,
add.to.row = table_details(stan_models)
)
plot_interaction <-
marginal_effects(stan_models[[length(stan_models)]],
effects = "ztrack:zvoc",
int_conditions = list(zvoc = quantile))
plot(plot_interaction, plot = FALSE)[[1]] +
labs(x = "Tracking Index (SD)", y = "Difference in test scores (SD)") +
scale_colour_discrete(
name = "Vocational index \n quantiles",
labels = seq(100, 0, -25) %>% paste0("%")
) +
scale_fill_discrete(guide = FALSE) +
ggtitle("Interaction between Tracking and Vocational index")
# pp_check(mod_tracking, type = "dens_overlay", nsamples = 100)
# pp_check(mod_tracking, type = "scatter_avg", nsamples = 100)
# pp_check(mod_tracking, type = "boxplot", nsamples = 20)
# pp_check(mod_tracking, type = "error_hist", nsamples = 6)
# pp_check(mod_tracking, type = "ecdf_overlay")
#
# pp_check(mod_tracking, type = "error_scatter_avg_vs_x", x = "zvoc")
# pp_check(mod_tracking, type = "error_scatter_avg_vs_x", x = "ztrack")
@
<<all_gaps_plot>>=
gaps <- c("90th/10th SES gap", "80th/20th SES gap", "70th/30th SES gap")
all_gaps_models <-
map(gaps, function(gap) {
ready_data_age <-
dif_data(complete_gaps, tracking_data, central_examination, which_gap = gap) %>%
mutate(age_selection = ifelse(selage >= 15, 1, 0) %>% as.factor)
mod_tracking <-
brms::brm(
difference ~
ztrack +
zvoc +
ztrack:zvoc +
(1|year), family = gaussian(),
data = ready_data_age,
warmup = 1000, iter = 2000, chains = 5,
control = list(adapt_delta = 0.95)
)
mod_tracking
})
model_data_merged <-
map(all_gaps_models, ~ fixef(.x)[, c(1, 3, 4)] %>% as_tibble) %>%
setNames(gaps) %>%
enframe() %>%
unnest(value) %>%
mutate_if(is_double, round, 2) %>%
transmute(model = name,
terms = all_gaps_models[[1]] %>% fixef %>% row.names %>% rep(3),
estimate = Estimate,
lower = `2.5%ile`,
upper = `97.5%ile`)
model_data_merged %>%
ggplot(aes(terms, estimate, colour = model)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = NULL) +
scale_y_continuous(limits = c(-0.5, 2)) +
scale_x_discrete(labels = c("Intercept",
"Tracking Index",
"Vocational * Tracking Index",
"Vocational Index")) +
labs(y = "Estimate from linear model", x = "Predictors") +
ggtitle("Estimation of tracking/vocational models for different gaps") +
coord_flip()
# It under predicts the y value rather than over predict
# It has problems predicting the central tendency of the model
# This linear model explains the pooled 90/10 differences
@
<<cumulative_modeling_table>>=
# One idea I had was to make a cumulative sum of the trend,
# so the cumulative inequality over time for each country
# and see how each tracking feature explains this cumulative
# pattern, and it does so very well, with each one
# separately (because I have only 30 observations) explaining
# about 22% each. Age selection, up to 30% alone.
vars_unique <- c("length", "num_tracks", "age_selection", "central_examination", "ztrack",
"zvoc")
all_gaps_models_cum <-
map(gaps, function(gap) {
gap_data <- dif_data(complete_gaps, tracking_data, central_examination, which_gap = gap)
ready_data_age <-
gap_data %>%
mutate(age_selection = ifelse(selage >= 15, 1, 0) %>% as.factor) %>%
group_by(country) %>%
summarize_at(vars(vars_unique), unique) %>%
mutate(cum_diff =
gap_data %>%
group_by(country) %>%
summarize(m = sum(difference)) %>%
pull(m))
mod_tracking <-
ready_data_age %>%
filter(!is.na(age_selection)) %>%
brm(
cum_diff ~ ztrack + zvoc,
family = gaussian(),
data = .,
warmup = 1000, iter = 2000, chains = 5
)
mod_tracking
})
all_gaps_models_cum %>%
stan_table() %>%
mutate(" " = c(
"Track Index",
"Vocational Index",
"Intercept"
)) %>%
setNames(c(" ", gsub(" SES gap", "", gaps))) %>%
xtable() %>%
print.xtable(
include.rownames = FALSE,
add.to.row = table_details(all_gaps_models_cum)
)
@
