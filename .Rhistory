})
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH")
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad), `6` = 7)))
}
.x
})
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH")
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad), `6` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(high_edu_broad))
}
.x
})
test_diff <- function(df, reliability, test) {
map2(df, reliability, function(.x, .y) {
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
country_split <- split(.x, .x$country)
country_list <- map(country_split, function(country) {
print(unique(country$country))
# In some countries the quan can't be estimated because of very few obs.
# The function doesn't stop but returns two NA's.
quan <- quantile_missing(country, weights_var)
# It's very important to create a variable that returns the number of observations of this dummy
# For each country. Possibly to weight by the number of observations.
country$escs_dummy <-
with(country, case_when(escs_trend >= quan[2] ~ 1,
escs_trend <= quan[1] ~ 0))
country
})
.x <-
enframe(country_list) %>%
unnest(value)
.x <-
.x %>%
select(wave, matches(paste0("^PV.*", test, "$")), escs_dummy,
country, one_of(weights_var),
AGE)
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
# Calculate median math score of all PV's
.x$dv <- apply(.x[test_vars], 1, median, na.rm = T)
# Should I estimate the model separately by country?
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
# Take residuals of model and divide by rmse. Multiply that by
# 1 / sqrt(reliability of each survey), which is .y in the loop.
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
mod2 <-
lmer(adj_pvnum ~ escs_dummy + (1 + escs_dummy | country),
data = .x,
weights = .x[[weights_var]])
# Take the country coefficients (absolute coefficients)
country_coef <-
coef(mod2)$country %>%
rownames_to_column() %>%
gather(escs_dummy, Mean, -rowname) %>%
mutate(escs_dummy = dplyr::recode(escs_dummy,
`(Intercept)` = "0",
`escs_dummy` = "1"))
# Take the absolute country standard errors
se <-
se.coef(mod2)$country %>%
as.data.frame() %>%
rownames_to_column() %>%
gather(escs_dummy, s.e., -rowname) %>%
mutate(escs_dummy = dplyr::recode(escs_dummy,
`(Intercept)` = "0",
`escs_dummy` = "1"))
results <-
inner_join(country_coef, se, by = c("rowname", "escs_dummy")) %>%
rename(country = rowname) %>%
arrange(country, escs_dummy)
message(paste0(unique(.x$wave), " modeling done"))
results
})
}
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH")
reduced_data <-
map2(results_math, years, function(.x, .y) {
.x %>%
mutate(wave = .y) %>%
filter(!is.na(escs_dummy))
}) %>%
bind_rows() %>%
mutate(lower = Mean - 1.96 * s.e.,
upper = Mean + 1.96 * s.e.)
se_data <-
reduced_data %>%
select(country, escs_dummy, wave, s.e.) %>%
spread(escs_dummy, s.e.) %>%
transmute(country, wave,
se_diff = sqrt(abs(`1`^2 - `0`^2)))
countries <- c("Chile", "Austria", "Belgium", "Canada", "Czech Republic", "Denmark",
"Finland", "France", "Germany", "Italy", "Japan", "Netherlands", "Norway",
"Poland", "Spain", "Sweden", "United Kingdom", "United States")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
countries <- c("Spain", "Greece", "Italy")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
countries <- c("Greece", "Italy")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
countries <- c("Spain", "Italy")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
countries <- c("Sweden", "Denmark", "Finland", "Norway")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
countries <- c("Sweden", "Denmark", "Finland", "Norway", "Netherlands")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
countries <- c("United States", "United Kingdom")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad),
`6` = 7,
`5` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad),
`6` = 7)))
}
.x
})
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH")
reduced_data <-
map2(results_math, years, function(.x, .y) {
.x %>%
mutate(wave = .y) %>%
filter(!is.na(escs_dummy))
}) %>%
bind_rows() %>%
mutate(lower = Mean - 1.96 * s.e.,
upper = Mean + 1.96 * s.e.)
se_data <-
reduced_data %>%
select(country, escs_dummy, wave, s.e.) %>%
spread(escs_dummy, s.e.) %>%
transmute(country, wave,
se_diff = sqrt(abs(`1`^2 - `0`^2)))
countries <- c("Chile", "Austria", "Belgium", "Canada", "Czech Republic", "Denmark",
"Finland", "France", "Germany", "Italy", "Japan", "Netherlands", "Norway",
"Poland", "Spain", "Sweden", "United Kingdom", "United States")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad),
`6` = 7,
`5` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(high_edu_broad))
}
.x
})
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad), `6` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(high_edu_broad))
}
.x
})
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH")
reduced_data <-
map2(results_math, years, function(.x, .y) {
.x %>%
mutate(wave = .y) %>%
filter(!is.na(escs_dummy))
}) %>%
bind_rows() %>%
mutate(lower = Mean - 1.96 * s.e.,
upper = Mean + 1.96 * s.e.)
reduced_data %>%
filter(country %in% c("United States")) %>%
ggplot(aes(as.character(wave), Mean, group = escs_dummy, colour = escs_dummy)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_line() +
facet_wrap(~ country)
se_data <-
reduced_data %>%
select(country, escs_dummy, wave, s.e.) %>%
spread(escs_dummy, s.e.) %>%
transmute(country, wave,
se_diff = sqrt(abs(`1`^2 - `0`^2)))
countries <- c("Chile", "Austria", "Belgium", "Canada", "Czech Republic", "Denmark",
"Finland", "France", "Germany", "Italy", "Japan", "Netherlands", "Norway",
"Poland", "Spain", "Sweden", "United Kingdom", "United States")
reduced_data %>%
select(country, escs_dummy, Mean, wave) %>%
spread(key = escs_dummy, value = Mean) %>%
mutate(diff = `1` - `0`) %>%
gather(escs_dummy, Mean, -country, -wave, -`1`, -`0`) %>%
left_join(se_data) %>%
mutate(continent = countrycode(country, "country.name", "continent"),
region = countrycode(country, "country.name", "region"),
lower = Mean - 1.96 * se_diff,
upper = Mean + 1.96 * se_diff) %>%
filter(!is.na(continent), !is.na(region), country %in% countries) %>%
ggplot(aes(as.factor(wave), Mean, group = country, colour = country)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_line() +
geom_point(size = 0.5) +
scale_colour_discrete(guide = F) +
# geom_smooth(aes(group = region), colour = "blue", method = "lm") +
coord_cartesian(ylim = c(0, 4)) +
facet_wrap(~ country) +
ggtitle("math")
f <- function(x) substitute(x)
f(1:10)
g <- function(x) deparse(f(x))
g(1:10)
x
?deparse
f <- function(x) substitute(x)
g <- function(x) deparse(eval(f(x)))
g(1:10)
g(x)
g <- function(x) deparse(f(x))
g(x)
g(x + y ^ 2 / z + exp(a * sin(b)))
x <- new.env()
x$e <- 1:10
e
eval(e)
eval(e, envir = x)
x
eval(e, envir = "x")
?eval
eval(e, envir = x)
x
ls(name = e)
ls()
ls(name = x)
get("e", envir = x)
eval(x)
eval(e, envir = e)
eval(e, envir = x)
eval(p <- 2, envir = x)
eval(e[e > 5], envir = x)
x <- new.env()
x$e <- 1:10
eval(e[e > 5], envir = x)
x$e
e
N <- 3
env <- new.env()
assign("N", 27, envir = env)
n
N
env$N
eval(substitute(e[e > 5]), envir = x)
substitute(e[e > 5])
eval(substitute(e), envir = x)
substitute
?substitute
eval(substitute(e, x), envir = x)
e <- 1:5
eval(substitute(e))
eval(substitute(e), envir = x)
globalenv()
ls(globalenv())
eval(quote(e), envir = x)
eval(quote(e))
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
sample_df
a <- 10
quote(a)
?quote
eval(expression(a), sample_df)
eval(quote(a), sample_df)
a <- 10
eval(a, sample_df)
quote(2 + 2)
eval(quote(2 + 2))
quote(eval(quote(2 + 2)))
eval(quote(eval(quote(2 + 2))))
quote(eval(quote(eval(quote(2 + 2)))))
eval(quote(eval(quote(eval(quote(2 + 2))))))
eval(quote(2 + 2))
eval(eval(quote(2 + 2)))
eval(eval(quote(eval(quote(eval(quote(2 + 2)))))))
quote(eval(quote(eval(quote(eval(quote(2 + 2)))))))
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x)
x[r, ]
}
subset2(sample_df, a >= 4)
sample_df2 <- data.frame(x = 1:10)
subset2(sample_df2, x > 8)
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x)
x[r, , drop = F]
}
subset2(sample_df2, x > 8)
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x)
df <- x[r, ,drop = F]
df[complete.cases(df), , drop = F]
}
subset2(sample_df2, x > 8)
sample_df2 <- data.frame(x = c(1:10, NA))
subset2(sample_df2, x > 8)
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x)
df <- x[r, ,drop = F]
df
}
sample_df2 <- data.frame(x = c(1:10, NA))
subset2(sample_df2, x > 8)
subset2 <- function(x, condition) {
condition_call <- quote(condition)
r <- eval(condition_call, x)
df <- x[r, ,drop = F]
df[complete.cases(df), , drop = F]
}
quote(condition)
subset2 <- function(x, condition) {
condition_call <- quote(condition)
r <- eval(condition_call, x)
df <- x[r, ,drop = F]
df[complete.cases(df), , drop = F]
}
subset2(sample_df, a >= 4)
subset2 <- function(x, condition) {
condition_call <- quote(condition)
r <- eval(condition_call, x)
df <- x[r, ,drop = F]
df[complete.cases(df), , drop = F]
}
