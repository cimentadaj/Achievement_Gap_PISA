reduce(bind_rows)
mod2 %>%
bind_rows
bind_rows %>%
gather(countries, diff)
mod2 %>%
bind_rows %>%
gather(countries, diff)
mod2 %>%
reduce(bind_rows)
?bind_rows
?reduce
1:3 %>% reduce(`+`)
?bind_rows
mod2 %>%
reduce(dplyr::bind_rows)
mod2 <-
.x %>%
split(.x$country) %>%
map(~ error_perc_diff(.x))
mod2
mod2 %>%
reduce(bind_rows)
reduce(mod2, bind_rows)
mod2 %>%
Filter(function(x) !all(is.na(x)))
?Filter
mod2 %>%
Filter(function(x) !all(is.na(x)), .)
mod2 %>%
Filter(function(x) !all(is.na(x)), .) %>%
reduce(mod2, bind_rows)
mod2 %>%
Filter(function(x) !all(is.na(x)), .)
mod2 %>%
Filter(function(x) !all(is.na(x)), .) %>%
reduce(bind_rows)
mod2 <-
.x %>%
split(.x$country) %>%
map(~ error_perc_diff(.x)) %>%
Filter(function(x) !all(is.na(x)), .)
mod2
mod2 %>%
reduce(bind_rows) %>%
mutate(country = names(mod2))
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH", c(0.1, 0.9))
test_diff <- function(df, reliability, test, probs) {
map2(df, reliability, function(.x, .y) {
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
.x <-
.x %>%
dplyr::select(wave,
matches(paste0("^PV.*", test, "$")),
high_edu_broad,
country,
one_of(weights_var),
AGE) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
# Calculate median math score of all PV's
.x$dv <- rowMedians(as.matrix(.x[test_vars]), na.rm = T)
# Should I estimate the model separately by country?
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
# Take residuals of model and divide by rmse. Multiply that by
# 1 / sqrt(reliability of each survey), which is .y in the loop.
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
error_perc_diff <- function(data) {
result <- try(perc_diff(data, high_edu_broad, adj_pvnum, W_FSTUWT))
if (class(result) == "try-error") {
c(NA, NA)
} else {
result
}
}
.x <- .x %>% filter(country %in% countries)
mod2 <-
.x %>%
split(.x$country) %>%
map(~ error_perc_diff(.x)) %>%
Filter(function(x) !all(is.na(x)), .)
mod2 %>%
reduce(bind_rows) %>%
mutate(country = names(mod2))
})
}
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH", c(0.1, 0.9))
results_math
years
results_math %>%
setNames(years)
results_math %>%
setNames(years) %>%
enframe(name = year) %>%
unnest()
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest()
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se)
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(country) +
geom_errorbar(aes(ymin = low, ymax = high))
facet_wrap(~ country)
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(country) +
geom_errorbar(aes(ymin = low, ymax = high)) +
facet_wrap(~ country)
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se)
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se)
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(aes(group = country)) +
geom_errorbar(aes(ymin = low, ymax = high)) +
facet_wrap(~ country)
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
filter(country != "United States") %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(aes(group = country)) +
geom_errorbar(aes(ymin = low, ymax = high)) +
facet_wrap(~ country)
results_math <- test_diff(adapted_year_data, reliability_pisa, "READ", c(0.1, 0.9))
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
filter(country != "United States") %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(aes(group = country)) +
geom_errorbar(aes(ymin = low, ymax = high)) +
facet_wrap(~ country)
results_math <- test_diff(adapted_year_data, reliability_pisa, "READ", c(0.1, 0.5))
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
filter(country != "United States") %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(aes(group = country)) +
geom_errorbar(aes(ymin = low, ymax = high)) +
facet_wrap(~ country)
test_diff <- function(df, reliability, test, probs) {
map2(df, reliability, function(.x, .y) {
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
.x <-
.x %>%
dplyr::select(wave,
matches(paste0("^PV.*", test, "$")),
high_edu_broad,
country,
one_of(weights_var),
AGE) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
# Calculate median math score of all PV's
.x$dv <- rowMedians(as.matrix(.x[test_vars]), na.rm = T)
# Should I estimate the model separately by country?
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
# Take residuals of model and divide by rmse. Multiply that by
# 1 / sqrt(reliability of each survey), which is .y in the loop.
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
error_perc_diff <- function(data) {
result <- try(perc_diff(data, high_edu_broad, adj_pvnum, W_FSTUWT, percentiles = probs))
if (class(result) == "try-error") {
c(NA, NA)
} else {
result
}
}
.x <- .x %>% filter(country %in% countries)
mod2 <-
.x %>%
split(.x$country) %>%
map(~ error_perc_diff(.x)) %>%
Filter(function(x) !all(is.na(x)), .)
mod2 %>%
reduce(bind_rows) %>%
mutate(country = names(mod2))
})
}
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH", c(0.1, 0.5))
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
filter(country != "United States") %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(aes(group = country)) +
geom_errorbar(aes(ymin = low, ymax = high)) +
facet_wrap(~ country)
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH", c(0.1, 0.9))
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
filter(country != "United States") %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(aes(group = country)) +
geom_errorbar(aes(ymin = low, ymax = high)) +
facet_wrap(~ country)
rm(list = ls())
# Chunk 1: working directory
options(scipen = 213141)
opts_chunk$set(echo = FALSE,
message = FALSE,
cache = TRUE,
warning = FALSE,
include = FALSE,
cache.lazy = FALSE,
results = 'asis')
# Chunk 2: default_conf
library(knitr)
library(arm)
library(saves)
library(haven)
library(PISA2000lite)
library(PISA2003lite)
library(PISA2006lite)
library(PISA2009lite)
library(PISA2012lite)
library(intsvy)
library(cimentadaj) # devtools::install_github("cimentadaj/cimentadaj")
library(countrycode) # For region variable
library(car)
library(SAScii)
library(inequalityintsvy) # devtools::install_github("cimentadaj/inequalityintsvy")
library(lme4)
library(modelr)
library(tidyverse)
library(ggrepel)
library(xtable)
library(ggthemes)
library(matrixStats)
# source("./transform_data.R")
# Conf for PISA_2015
pisa2015_conf <- list(variables = list(pvlabelpref = "PV",
pvlabelsuff = "READ",
weightFinal = "W_FSTUWT",
weightBRR = "W_FSTURWT"),
parameters = list(cutoffs = c(357.77, 420.07, 482.38, 544.68, 606.99, 669.30),
percentiles = c(5, 10, 25, 75, 90, 95),
PVreps = 10,
BRRreps = 80,
weights = "BRR",
replication_scheme = 'pisa')
)
countries <- c("Finland",
"France",
# "New Zealand",
"Austria",
"Australia",
"Sweden",
# "Czech Republic",
"Canada",
"Hungary",
# "Iceland",
"Netherlands",
"Spain",
# "Belgium",
"Italy",
# "Norway",
"United Kingdom",
# "Greece",
"Denmark",
# "Israel",
"Poland",
"United States",
"Germany"
# "Turkey",
# "Russia"
)
# Chunk 3: loading_data-recoding
pisa_all <- read_rds("./paper/data/pisa_listcol.Rdata")
pisa_all2 <- pisa_all
years <- seq(2000, 2015, 3)
db <- paste0("pisa", years)
pisa_all2$value <- map2(pisa_all2$value, db, ~ { .x$wave <- .y; .x})
pisa_all2$value[[1]]$CNT <- pisa_all2$value[[1]]$COUNTRY
pisa_all2$value <- map(pisa_all2$value, ~ {
# 2000 to 2015
# The coding is from 0 to 6, where 0 is no schooling and 6 is
# BA or above.
# When turning 0:6 to numeric, it becomes 1:7 that's why
# I recode 8:9 to NA. This, however, didn't work for last two surveys
.x$father_edu <- car::recode(as.numeric(.x$FISCED), "8:9 = NA")
.x$mother_edu <- car::recode(as.numeric(.x$MISCED), "8:9 = NA")
.x$high_edu_broad <- pmax(.x$father_edu, .x$mother_edu)
.x$country <- pisa_countrynames[as.character(.x$CNT)]
if (any(unique(.x$wave) %in% c("pisa2012", "pisa2015"))) {
# These two surveys were from 0:6 so I had to add + 1
# so that it equals 1:7 as all other surveys.
.x$father_edu <- .x$father_edu + 1
.x$mother_edu <- .x$mother_edu + 1
.x$high_edu_broad <- .x$high_edu_broad + 1
}
.x
})
reliability_pisa <-
c("2000" = 0.81,
"2003" = 0.85,
"2006" = 0.78,
"2009" = 0.74,
"2012" = 0.82,
"2015" = 0.74) # 2015 imputed
# Chunk 4: escs_trend
# Rescaled trend ESCS data to merge.
# This only has data for seq(2000, 2012, 3) because
# PISA 2015 has the ESCS trend variable.
dir <- tempdir()
file_name <- "escs_trend.zip"
download.file("http://vs-web-fs-1.oecd.org/pisa/trend_escs_SPSS.zip",
destfile = file.path(dir, file_name))
unzip(file.path(dir, file_name), exdir = dir)
escs_trend <- map(file.path(dir, list.files(dir, pattern = ".sav")), haven::read_spss)
file.remove(file.path(dir, list.files(dir)))
escs_trend <-
map(escs_trend, ~ {
mutate(.x, cnt = pisa_countrynames[cnt]) %>%
rename(country = cnt)
})
# Chunk 5: merge_escs_pisa
# Next we'll merge the ESCS data with the PISA data. As explained above, the 6th data (PISA
# 2015) doesn't need to be merged so I exclude it with this vector
exclude <- -6
# Loop in parallel to the PISA data, the ESCS data and the year vector (which is seq(2012, 2015, 3))
pisa_all2$value[exclude] <-
pmap(list(pisa_all2$value[exclude], escs_trend, years[exclude]), function(.x, .y, .z) {
# The escs data needs to have the key variables the same class as the
# same data.
escs <-
.y %>% mutate(schoolid = as.numeric(schoolid),
stidstd = as.numeric(stidstd))
# .z is the corresponding year that will be created as a column
# And perform the same transformation of the key variables as in the ESCS data
data_trend <-
.x %>%
mutate(
year = .z,
schoolid = as.numeric(as.character(SCHOOLID)),
stidstd = as.numeric(as.character(STIDSTD))
) %>%
left_join(escs,
by = c("country", "schoolid", "stidstd"))
message(paste(unique(.x$wave), "done"))
data_trend
})
pisa_all2$value[[6]] <-
pisa_all2$value[[6]] %>%
rename(escs_trend = ESCS)
library(perccalc)
d <- map(1:6, ~ {
df <- pisa_all2$value[[.x]]
df_try <-
df %>%
filter(country == "France") %>%
select(country, high_edu_broad, matches("^PV*.MATH$"), W_FSTUWT) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
math_score <-
df_try %>%
select_if(is_double) %>%
as.matrix() %>%
rowMedians(na.rm = TRUE)
df_try <-
df_try %>%
select(country, high_edu_broad, W_FSTUWT) %>%
add_column(math_score)
perc_diff(df_try, high_edu_broad, math_score, percentiles = c(90, 10))
}) %>%
setNames(seq(2000, 2015, 3)) %>%
enframe() %>%
unnest() %>%
slice(seq(1, 12, 2))
d %>%
ggplot(aes(name, value)) +
geom_point() +
geom_line(aes(group = 1))
adapted_year_data <-
map(pisa_all2$value, ~ {
if (unique(.x$wave) == "pisa2000") {
# pisa2000 has a different coding so here I recode 6 to 7 so that in all waves the top edu
# is 7 and the bottom is 1
.x <-
mutate(.x, new_hisced = as.character(dplyr::recode(as.numeric(high_edu_broad), `6` = 7)))
} else {
.x <-
mutate(.x, new_hisced = as.character(high_edu_broad))
}
.x
})
test_diff <- function(df, reliability, test, probs) {
map2(df, reliability, function(.x, .y) {
conf <- if (unique(.x$wave) == "pisa2015") pisa2015_conf else pisa_conf
weights_var <- conf$variables$weightFinal
.x <-
.x %>%
dplyr::select(wave,
matches(paste0("^PV.*", test, "$")),
high_edu_broad,
country,
one_of(weights_var),
AGE) %>%
mutate(high_edu_broad = factor(high_edu_broad, ordered = TRUE))
message(paste(unique(.x$wave), "data ready"))
test_vars <- paste0("PV", seq_len(conf$parameters$PVreps), test)
.x[test_vars] <- map(.x[test_vars], ~ ifelse(.x == 9997, NA, .x))
# Calculate median math score of all PV's
.x$dv <- rowMedians(as.matrix(.x[test_vars]), na.rm = T)
# Should I estimate the model separately by country?
mod1 <- lm(dv ~ AGE,
weights = .x[[weights_var]],
data = .x,
na.action = "na.exclude")
# Take residuals of model and divide by rmse. Multiply that by
# 1 / sqrt(reliability of each survey), which is .y in the loop.
.x$adj_pvnum <- resid(mod1)/rmse(mod1, .x) * 1 / sqrt(.y)
error_perc_diff <- function(data) {
result <- try(perc_diff(data, high_edu_broad, adj_pvnum, W_FSTUWT, percentiles = probs))
if (class(result) == "try-error") {
c(NA, NA)
} else {
result
}
}
.x <- .x %>% filter(country %in% countries)
mod2 <-
.x %>%
split(.x$country) %>%
map(~ error_perc_diff(.x)) %>%
Filter(function(x) !all(is.na(x)), .)
mod2 %>%
reduce(bind_rows) %>%
mutate(country = names(mod2))
})
}
results_math <- test_diff(adapted_year_data, reliability_pisa, "MATH", c(0.1, 0.9))
results_math %>%
setNames(years) %>%
enframe(name = "year") %>%
unnest() %>%
filter(country != "United States") %>%
mutate(low = difference - 1.96 * se,
high = difference + 1.96 * se) %>%
ggplot(aes(year, difference)) +
geom_point() +
geom_line(aes(group = country)) +
geom_errorbar(aes(ymin = low, ymax = high)) +
facet_wrap(~ country)
